<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AML.Editor.PluginContracts</name>
    </assembly>
    <members>
        <member name="T:Aml.Editor.Plugin.Base.NamespaceDoc">
            <summary>
            The Aml.Editor.Plugin.Base name space contains abstract Base Classes for AutomationML
            Editor PlugIn Developers which implement some basic Functionality for PlugIns. 
            Example Implementations, that may be used as a starting point for PlugIn Development
            are available on <a href="https://github.com/AutomationML/AMLEditorPluginContract/tree/master/Templates">the 
            Aml.Editor.Plugin</a> Project side for Developers.
            </summary>
            <remarks>
            To get a PlugIns loaded into the AutomationML Editor at startup the DLLs have to be put in the PlugIns
            Folder in the Execution Directory of the Editor. Only the AutomationML Editor Version 4 and
            higher supports 3d Party PlugIns. Every PlugIn shall use the same version of the Aml.Engine as the
            used Aml.Editor version.
            </remarks>
        </member>
        <member name="T:Aml.Editor.Plugin.Base.PluginBase">
            <summary>
            PluginBase is an abstract base class for PlugIn Implementation which is a basic implementation of the <see cref="T:Aml.Editor.Plugin.Contracts.IAMLEditorPlugin"/>
            PlugIn Interface
            </summary>
        </member>
        <member name="F:Aml.Editor.Plugin.Base.PluginBase.commands">
            <summary>
            The PlugIn commands which are shown in the PlugIn Menu.
            </summary>
        </member>
        <member name="F:Aml.Editor.Plugin.Base.PluginBase._displayName">
            <summary>
            The Display name
            </summary>
        </member>
        <member name="M:Aml.Editor.Plugin.Base.PluginBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aml.Editor.Plugin.Base.PluginBase"/> class which contains the two PlugIn Commands
            <see cref="P:Aml.Editor.Plugin.Base.PluginBase.ActivatePlugin"/> and <see cref="P:Aml.Editor.Plugin.Base.PluginBase.TerminatePlugin"/> which every PlugIn should have.
            </summary>
        </member>
        <member name="E:Aml.Editor.Plugin.Base.PluginBase.PluginActivated">
            <summary>
            The Event occurs when the PlugIn is Activated (for example via an Activation Command).
            This event is raised by the PlugIn and handled by the AutomationML Editor. If the PlugIn
            has a UI-Control, the AutomationML Editor will show the UI and dock the Control in a
            Container Window, used for external Views.
            </summary>
        </member>
        <member name="E:Aml.Editor.Plugin.Base.PluginBase.PluginTerminated">
            <summary>
            Occurs when the PlugIn is terminated (some UserInteraction inside the PlugIn, i. e. a
            Window is Closed, or via a Command). This event is raised by the PlugIn and handled by
            the AutomationML Editor. If the PlugIn is a UI-Control <see cref="T:Aml.Editor.Plugin.Contracts.IAMLEditorView" />, the
            control is removed from the Container Window. The State of the currently open AutomationML
            Document is checked, and if it was modified, the User will be asked to reload it.
            </summary>
        </member>
        <member name="P:Aml.Editor.Plugin.Base.PluginBase.ActivatePlugin">
            <summary>
            Gets the Activation command for the PlugIn.
            </summary>
            <value>
            The activation command.
            </value>
        </member>
        <member name="P:Aml.Editor.Plugin.Base.PluginBase.Commands">
            <summary>
            Gets the List of commands, which are bound to the PlugIn Menu in the AutomationML
            Editor. The Command Names are shown in a sub-Menu in the PlugIn-Menu.
            </summary>
            <value>
            The commands.
            </value>
        </member>
        <member name="P:Aml.Editor.Plugin.Base.PluginBase.DisplayName">
            <summary>
            Gets the display name which is shown in the PlugIn Menu in the AutomationML Editor.
            </summary>
            <value>
            The display name.
            </value>
        </member>
        <member name="P:Aml.Editor.Plugin.Base.PluginBase.IsActive">
            <summary>
            Gets a value indicating whether this instance is active.
            </summary>
            <value><c>true</c> if this instance is active; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Aml.Editor.Plugin.Base.PluginBase.IsAutoActive">
            <summary>
            Gets or sets a value indicating whether this instance is automatic active when loaded.
            This value can be initially set and will be defined by the user.
            </summary>
            <value>
              <c>true</c> if this instance is automatic active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Aml.Editor.Plugin.Base.PluginBase.IsReactive">
            <summary>
            Gets a value indicating whether this instance is reactive. Reactive PlugIn will be
            notified, when the actual CAEX-Object changes (Selection of any Tree view Item in an
            AutomationML TreeView) via the <see cref="M:Aml.Editor.Plugin.Base.PluginBase.ChangeSelectedObject(Aml.Engine.CAEX.CAEXBasicObject)" /> Method or an
            AutomationML File is opened via the <see cref="M:Aml.Editor.Plugin.Base.PluginBase.ChangeAMLFilePath(System.String)" /> Method.
            </summary>
            <value>
              <c>true</c> if this instance is reactive; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Aml.Editor.Plugin.Base.PluginBase.IsReadonly">
            <summary>
            Gets a value indicating whether this instance is read only. A Read only PlugIn should not
            change any CAEX Objects.
            </summary>
            <value>
              <c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Aml.Editor.Plugin.Base.PluginBase.PackageName">
            <summary>
            Gets the package name which is used to download the PlugIn package from a NuGet feed. If a Package name
            is defined, the AMLEditor can update PlugIn packages independently from its own update cycle.
            </summary>
            <value>
            The package name.
            </value>
        </member>
        <member name="P:Aml.Editor.Plugin.Base.PluginBase.TerminatePlugin">
            <summary>
            Gets the Terminate command for the PlugIn.
            </summary>
            <value>
            The terminate command.
            </value>
        </member>
        <member name="M:Aml.Editor.Plugin.Base.PluginBase.ChangeAMLFilePath(System.String)">
            <summary>
            Changes the current amlFilePath. The Host Application will call this method when the
            PlugIns <see cref="P:Aml.Editor.Plugin.Base.PluginBase.IsReactive" /> Property is set to true and the Currently opened
            AutomationML File changes in the AMLEditor Host Application.
            </summary>
            <param name="amlFilePath">The Path to the current AML File in the AML Editor.</param>
        </member>
        <member name="M:Aml.Editor.Plugin.Base.PluginBase.ChangeSelectedObject(Aml.Engine.CAEX.CAEXBasicObject)">
            <summary>
            Changes the selected object. The Host Application will call this method when the PlugIns
            <see cref="P:Aml.Editor.Plugin.Base.PluginBase.IsReactive" /> Property is set to true and the Current Selection changes in
            the AMLEditor Host Application.
            </summary>
            <param name="selectedObject">The selected CAEX - object.</param>
        </member>
        <member name="M:Aml.Editor.Plugin.Base.PluginBase.ExecuteCommand(Aml.Editor.Plugin.Contracts.PluginCommandsEnum,System.String)">
            <summary>
            This Method enables the AutomationML Editor to execute a command. Only those commands
            are executable, which are identifiable via the <see cref="T:Aml.Editor.Plugin.Contracts.PluginCommandsEnum" />.
            </summary>
            <param name="command">The command identifier.</param>
            <param name="amlFilePath">The FilePath of the currently loaded AMLDocument, if a CAEXDocument is loaded, otherwise null or empty</param>
            <example>
              <code>
            // ...
            switch (command)
            {
            case PluginCommandsEnum.Activate:
            // activation code;
            // call your ActivateCommand execution method
            ActivateCommand.Execute (amlFilePath);
            break;
            case PluginCommandsEnum.Terminate:
            // termination code;
            // call your TerminateCommand execution method
            // the Execution Method of the PlugIn may save the changes of the AMLDocument if it was edited by the PlugIn.
            // It should raise the PluginTerminated Event. This Event is handled by the AMLEditor, the Editor will
            // check, if the Document was modified and ask the user to reload the document. The Editor will also return
            // to editing mode if it was disabled during activation.
            TerminateCommand.Execute (amlFilePath);
            break;
            }
            </code>
            </example>
        </member>
        <member name="M:Aml.Editor.Plugin.Base.PluginBase.PublishAutomationMLFileAndObject(System.String,Aml.Engine.CAEX.CAEXBasicObject)">
            <summary>
            PublishAutomationMLFileAndObject after the PlugIn is activated. This Method is called by
            the AutomationML Editor when the <see cref="E:Aml.Editor.Plugin.Base.PluginBase.PluginActivated" /> Event is handled. The
            AutomationML Editor will send the actual Path of the AutomationML File and the actual
            selected Object to the PlugIn, when an AutomationML File is currently open. If the
            Activation happened, when no AutomationML File was opened so far, the PlugIn will be
            informed as soon as this will happen, but only if the <see cref="P:Aml.Editor.Plugin.Base.PluginBase.IsReactive" /> Flag is set to true.
            </summary>
            <param name="amlFilePath">The AML file path.</param>
            <param name="selectedObject">The selected CAEX Object.</param>
            <example>
              <code>
            // To Load the content of the AutomationML Document the AmlEngine can be used
            var document = CAECDocument.LoadFromFile (amlFilePath);        </code>
            </example>
        </member>
        <member name="M:Aml.Editor.Plugin.Base.PluginBase.ActivateCommandCanExecute(System.Object)">
            <summary>
            Test, if the <see cref="P:Aml.Editor.Plugin.Base.PluginBase.ActivatePlugin" /> can execute.
            </summary>
            <param name="parameter">parameter may contain the FilePath of the Active AMLDocument if a document is loaded,
            otherwise it is null or empty</param>
            <returns>true, if command can execute</returns>
        </member>
        <member name="M:Aml.Editor.Plugin.Base.PluginBase.ActivateCommandExecute(System.Object)">
            <summary>
            The <see cref="P:Aml.Editor.Plugin.Base.PluginBase.ActivatePlugin" /> Execution Action. The <see cref="P:Aml.Editor.Plugin.Base.PluginBase.IsActive"/> Property is set to true and
            the <see cref="E:Aml.Editor.Plugin.Base.PluginBase.PluginActivated"/> Event is raised.
            </summary>
            <param name="parameter">parameter may contain the FilePath of the Active AMLDocument if a document is loaded,
            otherwise it is null or empty</param>
        </member>
        <member name="M:Aml.Editor.Plugin.Base.PluginBase.RaisePluginActivated">
            <summary>
            Raises the PlugIn activated.
            </summary>
        </member>
        <member name="M:Aml.Editor.Plugin.Base.PluginBase.RaisePluginTerminated">
            <summary>
            Raises the PlugIn terminated.
            </summary>
        </member>
        <member name="M:Aml.Editor.Plugin.Base.PluginBase.TerminateCommandCanExecute(System.Object)">
            <summary>
            Test, if the <see cref="P:Aml.Editor.Plugin.Base.PluginBase.TerminatePlugin" /> can execute.
            </summary>
            <param name="parameter">parameter may contain the FilePath of the Active AMLDocument if a document is loaded,
            otherwise it is null or empty</param>
            <returns>true, if command can execute</returns>
        </member>
        <member name="M:Aml.Editor.Plugin.Base.PluginBase.TerminateCommandExecute(System.Object)">
            <summary>
            The <see cref="P:Aml.Editor.Plugin.Base.PluginBase.TerminatePlugin" /> Execution Action. The <see cref="P:Aml.Editor.Plugin.Base.PluginBase.IsActive"/> Property is set to false and
            the <see cref="E:Aml.Editor.Plugin.Base.PluginBase.PluginTerminated"/> Event is raised.
            </summary>
            <param name="parameter">parameter may contain the FilePath of the Active AMLDocument if a document is loaded,
            otherwise it is null or empty</param>
        </member>
        <member name="T:Aml.Editor.Plugin.Contracts.DockPositionEnum">
            <summary>
            This enum defines the possible docking positions for a plugIn window, when it is layouted by the Editors
            Docking manager.
            </summary>
        </member>
        <member name="F:Aml.Editor.Plugin.Contracts.DockPositionEnum.DockLeft">
            <summary>
            The initial position is the left tabular docking pane
            </summary>
        </member>
        <member name="F:Aml.Editor.Plugin.Contracts.DockPositionEnum.DockRight">
            <summary>
            The initial position is the right tabular docking pane
            </summary>
        </member>
        <member name="F:Aml.Editor.Plugin.Contracts.DockPositionEnum.DockBottom">
            <summary>
            The initial position is the bottom tabular docking pane
            </summary>
        </member>
        <member name="F:Aml.Editor.Plugin.Contracts.DockPositionEnum.DockTop">
            <summary>
            The initial position is the top tabular docking pane
            </summary>
        </member>
        <member name="F:Aml.Editor.Plugin.Contracts.DockPositionEnum.DockContent">
            <summary>
            The initial position is the content host containing also the library views
            </summary>
        </member>
        <member name="F:Aml.Editor.Plugin.Contracts.DockPositionEnum.Floating">
            <summary>
            The plugIn window is viewed as a floating window
            </summary>
        </member>
        <member name="P:Aml.Editor.Plugin.Contracts.IAMLEditorExternalsPlugin.IsExternalsViewer">
            <summary>
            Gets a value indicating whether this PlugIn is an externals viewer. An external viewer is provided
            with a selected external data source like a PLCopenXML document or a COLLADA document or any other
            content. An external viewer can restrict itself to a specific MIME type <see cref="P:Aml.Editor.Plugin.Contracts.IAMLEditorExternalsPlugin.MIMEType"/>.
            If any external content is ready to be viewed, the AML Editors calls the
            <see cref="!:ViewExternal(AttributeTypeType, Stream)"></see> or <see cref="!:ViewExternal(AttributeTypeType, string)"></see>.
            </summary>
            <value>
              <c>true</c> if this instance is externals viewer; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Aml.Editor.Plugin.Contracts.IAMLEditorExternalsPlugin.MIMEType">
            <summary>
            Gets the MIME type defining the content class, this viewer is able to handle. The AML editor looks at the
            MIME type, found in the external reference or AutomationML container relation. As an example, the MIME type in
            the <see cref="F:Aml.Engine.AmlObjects.AutomationMLContainer.RelationshipType.Collada"></see> is
            set to "model/vnd.collada+xml".
            </summary>
        </member>
        <member name="M:Aml.Editor.Plugin.Contracts.IAMLEditorExternalsPlugin.ViewExternal(Aml.Engine.AmlObjects.RefURIAttributeType,System.String)">
            <summary>
            This method is called by the AML editor if the PlugIn's property <see cref="P:Aml.Editor.Plugin.Contracts.IAMLEditorExternalsPlugin.IsExternalsViewer"></see>
            returns <c>true</c> and the URI attribute references a file.
            </summary>
            <param name="attribute">The attribute.</param>
            <param name="filePath">The file path.</param>
        </member>
        <member name="M:Aml.Editor.Plugin.Contracts.IAMLEditorExternalsPlugin.ViewExternal(Aml.Engine.AmlObjects.RefURIAttributeType,System.IO.Stream)">
            <summary>
            This method is called by the AML editor if the PlugIn's property <see cref="P:Aml.Editor.Plugin.Contracts.IAMLEditorExternalsPlugin.IsExternalsViewer"></see>
            returns <c>true</c> and the URI attribute references a stream in an AutomationML container.
            </summary>
            <param name="attribute">The attribute.</param>
            <param name="memoryStream">The memory stream.</param>
        </member>
        <member name="T:Aml.Editor.Plugin.Contracts.IAMLEditorPlugin">
             <summary>
             InterfaceClass for any AutomationML Editor PlugIn.
             The AutomationML Editor is the Host Application for any PlugIn, which implements this interface.
             The PlugIn implementing this interface will typically run it's own user interface thread. For an
             integrated UI-PlugIn, which will be controlled by the AutomationML Editors Main UI-Thread the
             <see cref="T:Aml.Editor.Plugin.Contracts.IAMLEditorView"/>-Interface Contract has to be used.
             </summary>
             <example>
            <code>
            [Export(typeof(IAMLEditorPlugin))]
            public class HelloAml : IAMLEditorPlugin
            {
            }
            </code>
            </example>
        </member>
        <member name="E:Aml.Editor.Plugin.Contracts.IAMLEditorPlugin.PluginActivated">
            <summary>
            The Event occurs when the PlugIn is Activated (for example via an Activation Command).
            This event is raised by the PlugIn and handled by the AutomationML Editor. If the PlugIn
            has a UI-Control, the AutomationML Editor will show the UI and dock the Control in a
            Container Window, used for external Views.
            </summary>
        </member>
        <member name="E:Aml.Editor.Plugin.Contracts.IAMLEditorPlugin.PluginTerminated">
            <summary>
            Occurs when the PlugIn is terminated (some UserInteraction inside the PlugIn, i. e. a
            Window is Closed, or via a Command). This event is raised by the PlugIn and handled by
            the AutomationML Editor. If the PlugIn is a UI-Control <see cref="T:Aml.Editor.Plugin.Contracts.IAMLEditorView"/>, the
            control is removed from the Container Window. The State of the currently open AutomationML
            Document is checked, and if it was modified, the User will be asked to reload it.
            </summary>
        </member>
        <member name="P:Aml.Editor.Plugin.Contracts.IAMLEditorPlugin.ActivatePlugin">
            <summary>
            Gets the Activation command for the PlugIn.
            </summary>
            <value>The activation command.</value>
        </member>
        <member name="P:Aml.Editor.Plugin.Contracts.IAMLEditorPlugin.Commands">
            <summary>
            Gets the List of commands, which are bound to the PlugIn Menu in the AutomationML
            Editor. The Command Names are shown in a sub-Menu in the PlugIn-Menu.
            </summary>
            <value>The commands.</value>
        </member>
        <member name="P:Aml.Editor.Plugin.Contracts.IAMLEditorPlugin.DisplayName">
            <summary>
            Gets the display name which is shown in the PlugIn Menu in the AutomationML Editor.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:Aml.Editor.Plugin.Contracts.IAMLEditorPlugin.IsActive">
            <summary>
            Gets a value indicating whether this instance is active.
            </summary>
            <value><c>true</c> if this instance is active; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Aml.Editor.Plugin.Contracts.IAMLEditorPlugin.IsReactive">
            <summary>
            Gets a value indicating whether this instance is reactive. Reactive PlugIn will be
            notified, when the actual CAEX-Object changes (Selection of any Tree view Item in an
            AutomationML TreeView) via the <see cref="M:Aml.Editor.Plugin.Contracts.IAMLEditorPlugin.ChangeSelectedObject(Aml.Engine.CAEX.CAEXBasicObject)"/> Method or an
            AutomationML File is opened via the <see cref="M:Aml.Editor.Plugin.Contracts.IAMLEditorPlugin.ChangeAMLFilePath(System.String)"/> Method.
            </summary>
            <value><c>true</c> if this instance is reactive; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Aml.Editor.Plugin.Contracts.IAMLEditorPlugin.IsReadonly">
            <summary>
            Gets a value indicating whether this instance is read only. A Read only PlugIn should not
            change any CAEX Objects.
            </summary>
            <value><c>true</c> if this instance is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Aml.Editor.Plugin.Contracts.IAMLEditorPlugin.IsAutoActive">
            <summary>
            Gets or sets a value indicating whether this instance is automatic active when loaded.
            This value can be initially set and will be defined by the user.
            </summary>
            <value>
              <c>true</c> if this instance is automatic active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Aml.Editor.Plugin.Contracts.IAMLEditorPlugin.PackageName">
            <summary>
            Gets the package name which is used to download the PlugIn package from a NuGet feed. If a Package name
            is defined, the AMLEditor can update PlugIn packages independently from its own update cycle.
            </summary>
            <value>The package name.</value>
        </member>
        <member name="P:Aml.Editor.Plugin.Contracts.IAMLEditorPlugin.TerminatePlugin">
            <summary>
            Gets the Terminate command for the PlugIn.
            </summary>
            <value>The terminate command.</value>
        </member>
        <member name="M:Aml.Editor.Plugin.Contracts.IAMLEditorPlugin.ChangeAMLFilePath(System.String)">
            <summary>
            Changes the current amlFilePath. The Host Application will call this method when the
            PlugIns <see cref="P:Aml.Editor.Plugin.Contracts.IAMLEditorPlugin.IsReactive"/> Property is set to true and the Currently opened
            AutomationML File changes in the AMLEditor Host Application.
            </summary>
            <param name="amlFilePath">The Path to the current AML File in the AML Editor.</param>
        </member>
        <member name="M:Aml.Editor.Plugin.Contracts.IAMLEditorPlugin.ChangeSelectedObject(Aml.Engine.CAEX.CAEXBasicObject)">
            <summary>
            Changes the selected object. The Host Application will call this method when the PlugIns
            <see cref="P:Aml.Editor.Plugin.Contracts.IAMLEditorPlugin.IsReactive"/> Property is set to true and the Current Selection changes in
            the AMLEditor Host Application.
            </summary>
            <param name="selectedObject">The selected CAEX - object.</param>
        </member>
        <member name="M:Aml.Editor.Plugin.Contracts.IAMLEditorPlugin.ExecuteCommand(Aml.Editor.Plugin.Contracts.PluginCommandsEnum,System.String)">
             <summary>
             This Method enables the AutomationML Editor to execute a command. Only those commands
             are executable, which are identifiable via the <see cref="T:Aml.Editor.Plugin.Contracts.PluginCommandsEnum"/>.
             </summary>
             <param name="command">The command identifier.</param>
             <param name="amlFilePath">The FilePath of the currently loaded AMLDocument, if a CAEXDocument is loaded, otherwise null or empty</param>
             <example>
             <code>
             // ...
             switch (command)
                {
                    case PluginCommandsEnum.Activate:
                        // activation code;
                        // call your ActivateCommand execution method
            
                        ActivateCommand.Execute (amlFilePath);
                        break;
            
                    case PluginCommandsEnum.Terminate:
            
                        // termination code;
                        // call your TerminateCommand execution method
                        // the Execution Method of the PlugIn may save the changes of the AMLDocument if it was edited by the plugIn.
                        // It should raise the PluginTerminated Event. This Event is handled by the AMLEditor, the Editor will
                        // check, if the Document was modified and ask the user to reload the document. The Editor will also return
                        // to editing mode if it was disabled during activation.
            
                        TerminateCommand.Execute (amlFilePath);
                        break;
                }
             </code>
             </example>
        </member>
        <member name="M:Aml.Editor.Plugin.Contracts.IAMLEditorPlugin.PublishAutomationMLFileAndObject(System.String,Aml.Engine.CAEX.CAEXBasicObject)">
            <summary>
            PublishAutomationMLFileAndObject after the PlugIn is activated. This Method is called by
            the AutomationML Editor when the <see cref="E:Aml.Editor.Plugin.Contracts.IAMLEditorPlugin.PluginActivated"/> Event is handled. The
            AutomationML Editor will send the actual Path of the AutomationML File and the actual
            selected Object to the PlugIn, when an AutomationML File is currently open. If the
            Activation happened, when no AutomationML File was opened so far, the PlugIn will be
            informed as soon as this will happen, but only if the <see cref="P:Aml.Editor.Plugin.Contracts.IAMLEditorPlugin.IsReactive"/> Flag is set to true.
            </summary>
            <param name="amlFilePath">   The AML file path.</param>
            <param name="selectedObject">The selected CAEX Object.</param>
            <example>
            <code>
            // To Load the content of the AutomationML Document the AmlEngine can be used
            var document = CAECDocument.LoadFromFile (amlFilePath);        ///
            </code>
            </example>
        </member>
        <member name="T:Aml.Editor.Plugin.Contracts.IAMLEditorView">
             <summary>
             The Interface IAMLEditorView is used for a PlugIn, which can be embedded in
             the AutomationML Editor's Window- and Docking-Manager. The PlugIn must implement the
             IFrameworkInputElement Interface (as an example, a WPF UserControl) and
             the <see cref="T:Aml.Editor.Plugin.Contracts.IAMLEditorPlugin"/> Interface. For windows, based on <see cref="N:System.Windows.Forms"/> ,
             the view must have a <see cref="T:System.Windows.Forms.Integration.WindowsFormsHost"></see> wrapper.
             </summary>
             <example>
            <code>
            [Export(typeof(IAMLEditorView))]
             public partial class HelloAml : System.Windows.Control.UserControl, IAMLEditorView
            {
            }
            </code>
            </example>
        </member>
        <member name="P:Aml.Editor.Plugin.Contracts.IAMLEditorView.CanClose">
            <summary>
            Gets a value indicating whether this PlugIn Instance can close. If set to true,
            the PlugIn may be closed from the AutomationML Docking Manger Window Menu or the
            Windows Close Button.
            </summary>
            <value><c>true</c> if this instance can close; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Aml.Editor.Plugin.Contracts.IAMLEditorView.InitialDockPosition">
            <summary>
            Gets the initial dock position for the PlugIn window
            </summary>
        </member>
        <member name="T:Aml.Editor.Plugin.Contracts.IAMLEditorViewCollection">
             <summary>
             The Interface IAMLEditorViewCollection is used for a PlugIn, which can be embedded in
             the AutomationML Editor's Window- and Docking-Manager. This PlugIn can provide
             multiple independent views, to be embedded at different positions in the AML Editor where
             each of the views shall implement the <see cref="T:Aml.Editor.Plugin.Contracts.IAMLEditorView"/> interface.    /// 
             It is possible to dynamically add and remove views from the collection while the PlugIn is
             active.
             </summary>
             <remarks>
             The individual views in this collection shall not export themselves as PlugIns because 
             the Activation and Termination is handled by this collection PlugIn for all views in the
             list as a whole.
             </remarks>
             <example>
            <code>
            [Export(typeof(IAMLEditorViewCollection))]
             public partial class MultiWindowPlugin : List&lt;IAMLEditorView&gt;
            {
            }
            </code>
            </example>
        </member>
        <member name="E:Aml.Editor.Plugin.Contracts.IAMLEditorViewCollection.ViewAdded">
            <summary>
            The Event occurs when a view has been added to this collection. The AML editor will handle this event and
            will dock the added view at the dock position, defined by the view. 
            </summary>
        </member>
        <member name="T:Aml.Editor.Plugin.Contracts.NamespaceDoc">
            <summary>
            The Aml.Editor.Plugin.Contracts Namespace contains Classes and Interfaces for AutomationML
            Editor Plugin Developers. The Interface Classes should be used as MEF Contracts, that
            matches Import and Export components, defined by Import and Export Attributes, at runtime.
            An AutomationML Editor Plugin will export the components, implementing the Interfaces in the
            Contract DLL and the AutomationML Editor imports those components. The Contracts DLL is
            managed on <a href="https://www.nuget.org/packages/AML.Editor.PluginContract/">nuget.</a>
            </summary>
            <remarks>
            All Plugins which export an interface are loaded into the AutomationML Editor at startup
            only. If the AutomationML Editor restarts after a crash, no Plugins are loaded, because the
            crash may be caused by a Plugin. To get a Plugin loaded, the DLLs have to be in the Plugins
            Folder in the Execution Directory of the Editor. Only the AutomationML Editor Version 4 and
            higher supports 3d Party Plugins.
            </remarks>
        </member>
        <member name="T:Aml.Editor.Plugin.Contracts.PluginCommand">
            <summary>
            Class PluginCommand is used to publish Commands from a Plugin to the AutomationML Editor.
            </summary>
        </member>
        <member name="F:Aml.Editor.Plugin.Contracts.PluginCommand._command">
            <summary>
            <see cref="P:Aml.Editor.Plugin.Contracts.PluginCommand.Command"/>
            </summary>
        </member>
        <member name="F:Aml.Editor.Plugin.Contracts.PluginCommand._commandName">
            <summary>
            <see cref="P:Aml.Editor.Plugin.Contracts.PluginCommand.CommandName"/>
            </summary>
        </member>
        <member name="F:Aml.Editor.Plugin.Contracts.PluginCommand._commandToolTip">
            <summary>
            <see cref="P:Aml.Editor.Plugin.Contracts.PluginCommand.CommandToolTip"/>
            </summary>
        </member>
        <member name="F:Aml.Editor.Plugin.Contracts.PluginCommand._doNothing">
            <summary>
            <see cref="P:Aml.Editor.Plugin.Contracts.PluginCommand.DoNothing"/>
            </summary>
        </member>
        <member name="F:Aml.Editor.Plugin.Contracts.PluginCommand._isCheckable">
            <summary>
            <see cref="P:Aml.Editor.Plugin.Contracts.PluginCommand.IsCheckable"/>
            </summary>
        </member>
        <member name="F:Aml.Editor.Plugin.Contracts.PluginCommand._isChecked">
            <summary>
            <see cref="P:Aml.Editor.Plugin.Contracts.PluginCommand.IsChecked"/>
            </summary>
        </member>
        <member name="M:Aml.Editor.Plugin.Contracts.PluginCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aml.Editor.Plugin.Contracts.PluginCommand"/> class.
            </summary>
        </member>
        <member name="P:Aml.Editor.Plugin.Contracts.PluginCommand.Command">
            <summary>
            Gets or sets the command, as an example a <see cref="T:Aml.Editor.Plugin.Contracts.RelayCommand`1"/>. A Command
            Parameter is set to the FilePath of the Active AMLDocument if a document is loaded,
            otherwise it is null or empty.
            </summary>
            <value>The command.</value>
        </member>
        <member name="P:Aml.Editor.Plugin.Contracts.PluginCommand.CommandName">
            <summary>
            Gets or sets the name of the command used by the AutomationML Editor to show the Command
            in the Plugin Menu
            </summary>
            <value>The name of the command.</value>
        </member>
        <member name="P:Aml.Editor.Plugin.Contracts.PluginCommand.CommandToolTip">
            <summary>
            Gets or sets the command tool tip
            </summary>
            <value>The command tool tip.</value>
        </member>
        <member name="P:Aml.Editor.Plugin.Contracts.PluginCommand.IsCheckable">
            <summary>
            Gets or sets a value indicating whether this instance is a checkable command. Checkable
            Commands get a Check Box in the MenuItem
            </summary>
            <value><c>true</c> if this instance is checkable command; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Aml.Editor.Plugin.Contracts.PluginCommand.IsChecked">
            <summary>
            Gets or sets a value indicating whether this instance is a toggle command. Toggle
            Commands get a Check Box in the MenuItem
            </summary>
            <value><c>true</c> if this instance is toggle command; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Aml.Editor.Plugin.Contracts.PluginCommand.DoNothing">
            <summary>
            The DoNothing - Command
            </summary>
        </member>
        <member name="M:Aml.Editor.Plugin.Contracts.PluginCommand.DoNothingCanExecute(System.Object)">
            <summary>
            Test, if the <see cref="P:Aml.Editor.Plugin.Contracts.PluginCommand.DoNothing"/> can execute.
            </summary>
            <param name="parameter">TODO The parameter.</param>
            <returns>true, if command can execute</returns>
        </member>
        <member name="M:Aml.Editor.Plugin.Contracts.PluginCommand.DoNothingExecute(System.Object)">
            <summary>
            The <see cref="P:Aml.Editor.Plugin.Contracts.PluginCommand.DoNothing"/> Execution Action.
            </summary>
            <param name="parameter">TODO The parameter.</param>
        </member>
        <member name="E:Aml.Editor.Plugin.Contracts.PluginCommand.PropertyChanged">
            <summary>
            Occurs when a property value changes
            </summary>
        </member>
        <member name="M:Aml.Editor.Plugin.Contracts.PluginCommand.OnPropertyChanged(System.String)">
            <summary>
            Called when [property changed].
            </summary>
            <param name="PropertyName">Name of the property.</param>
        </member>
        <member name="T:Aml.Editor.Plugin.Contracts.PluginCommandsEnum">
            <summary>
            Enumeration Constants for Plugin Commands. This Constants are used in the Host AutomationML Editor Application 
            to Execute a Plugin internal command. The Plugin should at least publish these commands to the Host via its command list.
            </summary>
        </member>
        <member name="F:Aml.Editor.Plugin.Contracts.PluginCommandsEnum.Activate">
            <summary>
            Identifies the activate command
            </summary>
        </member>
        <member name="F:Aml.Editor.Plugin.Contracts.PluginCommandsEnum.Terminate">
            <summary>
            Identifies the terminate command
            </summary>
        </member>
        <member name="T:Aml.Editor.Plugin.Contracts.RelayCommand`1">
            <summary>
            Class RelayCommand as it was defined in an MSDN Article <a href="http://msdn.microsoft.com/en-us/magazine/dd419663.aspx#id0090030">by Josh Smith.</a>
            This class is an implementation pattern for a plugin command, which the AutomationML Editor
            can bind to a plugin Menu. This Implementation provides the UI with the state information, to enabled or disable a command, and with the 
            invocation Method.
            </summary>
            <typeparam name="T">Type of Command Data (this may be the Systemtype 'object')</typeparam>
        </member>
        <member name="F:Aml.Editor.Plugin.Contracts.RelayCommand`1._canExecute">
            <summary>
            The _can execute
            </summary>
        </member>
        <member name="F:Aml.Editor.Plugin.Contracts.RelayCommand`1._execute">
            <summary>
            The _execute
            </summary>
        </member>
        <member name="F:Aml.Editor.Plugin.Contracts.RelayCommand`1.identifier">
            <summary>
            The identifier
            </summary>
        </member>
        <member name="M:Aml.Editor.Plugin.Contracts.RelayCommand`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aml.Editor.Plugin.Contracts.RelayCommand`1"/> class.
            </summary>
        </member>
        <member name="M:Aml.Editor.Plugin.Contracts.RelayCommand`1.#ctor(System.Action{`0},System.Predicate{`0})">
            <summary>
            Creates a new command.
            </summary>
            <param name="execute">   The execution logic.</param>
            <param name="canExecute">The execution status logic.</param>
            <exception cref="T:System.ArgumentNullException">execute</exception>
        </member>
        <member name="E:Aml.Editor.Plugin.Contracts.RelayCommand`1.CanExecuteChanged">
            <summary>
            Occurs, when property changes are notified, which have an effect on the command execution.
            </summary>
        </member>
        <member name="P:Aml.Editor.Plugin.Contracts.RelayCommand`1.Identifier">
            <summary>
            Gets or sets the identifier for the command, when the command is published by the plugin
            class, the Identifier can be set as an <see cref="T:Aml.Editor.Plugin.Contracts.PluginCommand"/>
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="M:Aml.Editor.Plugin.Contracts.RelayCommand`1.CanExecute(System.Object)">
            <summary>
            Defines the method used to determine whether the command in the current state can be performed.
            </summary>
            <param name="parameter">
            Data used from the command. When the command does not require data transfer, the object
            can be set to null.
            </param>
            <returns>true, if the command can be executed, otherwise false.</returns>
        </member>
        <member name="M:Aml.Editor.Plugin.Contracts.RelayCommand`1.Execute(System.Object)">
            <summary>
            Defines the method that will be called when the command is invoked.
            </summary>
            <param name="parameter">
            Data used from the command. When the command does not require data transfer, the object
            can be set to null.
            </param>
        </member>
    </members>
</doc>
