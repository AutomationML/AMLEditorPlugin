<?xml version="1.0"?>
<doc>
    <assembly>
        <name>InfragisticsWPF4.Controls.Editors.XamMaskedInput.v19.1</name>
    </assembly>
    <members>
        <member name="T:Infragistics.Controls.Primitives.CommandsHelper`1">
            <summary>
            Provides the list of RoutedCommands supported by the XamMaskedInput. 
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Primitives.CommandsHelper`1.#ctor(Infragistics.Controls.Primitives.CommandsHelper{`0}.CommandWrapper[],Infragistics.Controls.Primitives.CommandsHelper{`0}.CommandDefinition[])">
            <summary>
            Initializes a new <see cref="T:Infragistics.Controls.Primitives.CommandsHelper`1"/>
            </summary>
            <param name="commands">An array of <see cref="T:Infragistics.Controls.Primitives.CommandsHelper`1.CommandWrapper"/> instances</param>
            <param name="minimumRequiredStates">An array of definitions for the command dictating their required and minimum states</param>
        </member>
        <member name="M:Infragistics.Controls.Primitives.CommandsHelper`1.DoesMinimumStateMatch(`0,System.Int64)">
            <summary>
            Returns a nullable boolean indicating whether the specified command meets the required and disallowed states of the requirements for the specified command.
            </summary>
            <param name="commandId">The id of the command being evaluated</param>
            <param name="controlState">The current state of the control</param>
            <returns>If a minimum required state was not provided for the specified command when the object was constructed then null is returned. If there is a minimum required state for the specified command then true is returned if the requirements are satisfied based on the specified <paramref name="controlState"/>; otherwise false is returned.</returns>
        </member>
        <member name="M:Infragistics.Controls.Primitives.CommandsHelper`1.DoesMinimumStateMatch(`0,System.Func{System.Int64,System.Int64})">
            <summary>
            Returns a nullable boolean indicating whether the specified command meets the required and disallowed states of the requirements for the specified command.
            </summary>
            <param name="commandId">The id of the command being evaluated</param>
            <param name="getCurrentStates">Method used to obtain the current state of the control given a set of states for the command based on the minimum requirements provided for the specified command when the helper was constructed.</param>
            <returns>If a minimum required state was not provided for the specified command when the object was constructed then null is returned. If there is a minimum required state for the specified command then true is returned if the requirements are satisfied based on the specified current control state returned from the <paramref name="getCurrentStates"/>; otherwise false is returned.</returns>
        </member>
        <member name="M:Infragistics.Controls.Primitives.CommandsHelper`1.GetMatchingCommands(System.Windows.Input.Key,System.Windows.Input.ModifierKeys,System.Int64)">
            <summary>
            Returns an enumerable of commands based on the specified key and modifier keys for the specified current control state.
            </summary>
            <param name="key">The key being evaluated</param>
            <param name="modifierKeys">The current state of the modifier keys</param>
            <param name="controlState">The current state of the control</param>
            <returns>An enumerable of command ids for the commands mapped to the specified key for the specified modifier keys and control state</returns>
        </member>
        <member name="M:Infragistics.Controls.Primitives.CommandsHelper`1.GetMatchingCommands(System.Windows.Input.Key,System.Windows.Input.ModifierKeys,System.Func{System.Int64,System.Int64})">
            <summary>
            Returns an enumerable of commands based on the specified key and modifier keys for the specified current control state.
            </summary>
            <param name="key">The key being evaluated</param>
            <param name="modifierKeys">The current state of the modifier keys</param>
            <param name="getCurrentStates">Method used to obtain the current state of the control given a set of states for the commands matching the specified key and modifiers</param>
            <returns>An enumerable of command ids for the commands mapped to the specified key for the specified modifier keys and control state</returns>
        </member>
        <member name="T:Infragistics.Controls.Editors.Primitives.MaskedInputCommandId">
            <summary>
            Identifies <see cref="T:Infragistics.Controls.Editors.XamMaskedInput"/> commands.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.Primitives.MaskedInputCommandId.NotACommand">
            <summary>
            Does nothing. <b>NotACommand</b> is always ignored.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.Primitives.MaskedInputCommandId.NextCharacter">
            <summary>
            Command for moving the caret position to the next character.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.Primitives.MaskedInputCommandId.NextSection">
            <summary>
            Command for moving the caret position to the next section.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.Primitives.MaskedInputCommandId.AfterLastCharacter">
            <summary>
            Command for moving the caret position after the last character.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.Primitives.MaskedInputCommandId.SetPivot">
            <summary>
            Command for setting the pivot at where the caret is currently.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.Primitives.MaskedInputCommandId.PreviousCharacter">
            <summary>
            Command for moving the caret position to the previous character.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.Primitives.MaskedInputCommandId.PreviousSection">
            <summary>
            Command for moving the caret position to the previous section.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.Primitives.MaskedInputCommandId.FirstCharacter">
            <summary>
            Command for moving the caret position to the first character.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.Primitives.MaskedInputCommandId.SelectSection">
            <summary>
            Command for selecting all the characters of the current section.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.Primitives.MaskedInputCommandId.SelectAll">
            <summary>
            Command for selecting all the characters.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.Primitives.MaskedInputCommandId.Delete">
            <summary>
            Command for deleting selected text. If nothing is selected then the character at 
            the current caret position will be deleted.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.Primitives.MaskedInputCommandId.Backspace">
            <summary>
            Command for performing a 'Backspace' key operation. This command deletes the selected text. If nothing 
            is selected then the character before the current caret position will be deleted.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.Primitives.MaskedInputCommandId.Copy">
            <summary>
            Command for copying the selected text.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.Primitives.MaskedInputCommandId.Cut">
            <summary>
            Command for cutting the selected text.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.Primitives.MaskedInputCommandId.Paste">
            <summary>
            Command for pasting clipboard contents into the editor.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.Primitives.MaskedInputCommandId.Undo">
            <summary>
            Command for undoing last change to the value.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.Primitives.MaskedInputCommandId.Redo">
            <summary>
            Command for undoing last change to the value.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.Primitives.MaskedInputCommandId.ToggleInsertionMode">
            <summary>
            Command for toggling insert mode.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.Primitives.MaskedInputCommandId.SpinUp">
            <summary>
            Command for spinning up the value of the section.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.Primitives.MaskedInputCommandId.SpinDown">
            <summary>
            Command for spinning down the value of the section.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.Primitives.MaskedInputCommandId.ToggleDropDown">
            <summary>
            Command for toggling the drop down state of the <b>XamDateTimeEditor</b>.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Editors.Primitives.MaskedInputStates">
            <summary>
            Represents the different states of the MaskedInput control.  Used to evaluate whether a specific command can be executed.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.Primitives.MaskedInputStates.Character">
            <summary>
            caret is positioned right before a display char
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.Primitives.MaskedInputStates.FirstCharacter">
            <summary>
            the caret is positioned right before the first display char
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.Primitives.MaskedInputStates.LastCharacter">
            <summary>
            the caret is positioned right before the last display char 
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.Primitives.MaskedInputStates.FirstSection">
            <summary>
            the caret is in the first section
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.Primitives.MaskedInputStates.LastSection">
            <summary>
            the caret is in the last section
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.Primitives.MaskedInputStates.FirstCharacterInSection">
            <summary>
            the caret is positioned right before the first character in a section
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.Primitives.MaskedInputStates.LastCharacterInSection">
            <summary>
            the caret is positioned right before the last character in a section
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.Primitives.MaskedInputStates.AfterLastCharacter">
            <summary>
            the caret is positioned after the last display character		
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.Primitives.MaskedInputStates.Selected">
            <summary>
            some text is selected
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.Primitives.MaskedInputStates.Uninitialized">
            <summary>
            Mask has not been initialized, and thus no sections or
            display chars collection exists
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.Primitives.MaskedInputStates.FirstEditSection">
            <summary>
            the caret is in the first edit section
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.Primitives.MaskedInputStates.LastEditSection">
            <summary>
            the caret is in the last edit section
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.Primitives.MaskedInputStates.NotInEditMode">
            <summary>
            State where the editor is not in edit mode.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.Primitives.MaskedInputStates.TabBySections">
            <summary>
            State where the editor permits tabbing by sections based on the TabNavigation proeprty.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.Primitives.MaskedInputStates.NextSectionFraction">
            <summary>
            Next edit section is a fraction part.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.Primitives.MaskedInputStates.CanSpinDown">
            <summary>
            Current section can be decremented.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.Primitives.MaskedInputStates.CanSpinUp">
            <summary>
            Current section can be incremented.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.Primitives.MaskedInputStates.CanUndo">
            <summary>
            Can perform Undo action.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.Primitives.MaskedInputStates.CanRedo">
            <summary>
            Can perform Redo action.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.Primitives.MaskedInputStates.HasDropDown">
            <summary>
            There is an associated dropdown
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.Primitives.MaskedInputStates.IsDropDownOpen">
            <summary>
            The associated dropdown is open
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.Primitives.MaskedInputStates.IsReadOnly">
            <summary>
            State where the editor's <see cref="P:Infragistics.Controls.Editors.ValueInput.IsReadOnly"/> is true.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.Primitives.MaskedInputStates.All">
            <summary>
            The associated dropdown is open
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Editors.Primitives.MaskedInputCommand">
            <summary>
            Class for all commands that deal with a <see cref="T:Infragistics.Controls.Editors.XamMaskedInput"/> and derived editors.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.Primitives.MaskedInputCommand.CommandId">
            <summary>
            Gets the associated command id.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.MaskedInputCommand.CanExecute(System.Object)">
            <summary>
            Reports if the command can be executed on the object inputted.
            </summary>
            <param name="parameter">The object that the command will be executed against.</param>
            <returns>True if the object can support this command.</returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.MaskedInputCommand.Execute(System.Object)">
            <summary>
            Executes the command 
            </summary>
            <param name="parameter">The <see cref="T:Infragistics.Controls.Editors.XamMaskedInput"/> object that will be executed against.</param>
        </member>
        <member name="T:Infragistics.Controls.Editors.Primitives.MaskedInputCommandSource">
            <summary>
            The command source object for <see cref="T:Infragistics.Controls.Editors.Primitives.MaskedInputCommand"/> object.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.Primitives.MaskedInputCommandSource.CommandId">
            <summary>
            Gets or sets the CalendarCommand which is to be executed by the command.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.MaskedInputCommandSource.ResolveCommand">
            <summary>
            Generates the <see cref="T:System.Windows.Input.ICommand"/> object that will execute the command.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Controls.Editors.Primitives.MaskedInputCommandsHelper">
            <summary>
            Provides the list of RoutedCommands supported by the XamMaskedInput. 
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Editors.Primitives.MaskedInputTextBox">
            <summary>
            Used inside the template of the <see cref="T:Infragistics.Controls.Editors.XamMaskedInput"/>
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.MaskedInputTextBox.#ctor">
            <summary>
            Constructor. Creates a new instance of <see cref="T:Infragistics.Controls.Editors.Primitives.MaskedInputTextBox"/> class.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.MaskedInputTextBox.OnGotFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Called when the control recieves focus.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.MaskedInputTextBox.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Overridden. Called before KeyDown event is raised.
            </summary>
            <param name="e">Key event args.</param>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.MaskedInputTextBox.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when a mouse button is pressed down.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.MaskedInputTextBox.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the keyboard focus shifts into or out of the visual tree of this element.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.MaskedInputTextBox.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Overridden. Called to preview key down event.
            </summary>
            <param name="e">Key event args.</param>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.MaskedInputTextBox.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
            <summary>
            Overridden. Called when there is text input in the text box.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Infragistics.Controls.Editors.Primitives.Utils">
            <summary>
            A class with helper routines.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.Utils.Exists(System.Collections.IEnumerable,System.Object)">
            <summary>
            Returns true if the item exists in the specified enumerable.
            </summary>
            <param name="e"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.Utils.GetIsInEditModeHelper(System.Windows.DependencyObject)">
            <summary>
            XamGrid sets EditUtilities.IsInEditMode attached property on the cell element. This is used to indicate
            whether the editor should validate input.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.Utils.GetTextToValueConversionError(System.Type,System.String)">
            <summary>
            Gets an error message to display when user input fails to be converted to the specified
            target type.
            </summary>
            <param name="targetType"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.Utils.IsInfinityOrNaN(System.Object)">
            <summary>
            Returns true if the specified val is double or float and infinity or NaN.
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.Utils.IsMouseOverElement(System.Windows.DependencyObject,System.Windows.Input.MouseEventArgs)">
            <summary>
            Returns a value indicating whether the mouse position associated with the specified 
            mouse event args is inside the specified element.
            </summary>
            <param name="element"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.Utils.IsNumericType(System.Type)">
            <summary>
            Determines if a given System.Type is a numeric type.
            </summary>
            <param name="type">The System.Type to test.</param>
            <returns>True if the type is a numeric type.</returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.Utils.IsValueEmpty(System.Object)">
            <summary>
            Returns true if the specified val is null, DBNull, empty string, or DependencyProperty.UnsetValue.
            </summary>
            <param name="val">Value to test</param>
        </member>
        <member name="T:Infragistics.Controls.Editors.Primitives.ValidatedObservableCollection`1">
            <summary>
            An observable collection that allows you to specify a delegate for validating items being
            added to the collection.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Infragistics.Controls.Editors.Primitives.HorizontalToTextAlignmentConverter">
            <summary>
            A converter that converts HorizontalAlignment to TextAlignment.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Editors.Primitives.MaskCharConverter">
            <summary>
            Used as TypeConverter attribute on PadChar and PromptChar properties of the XamMaskedInput.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.MaskCharConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns true if the source type is string. False otherwise.
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.MaskCharConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns true if destination type is char. False otherwise.
            </summary>
            <param name="context"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.MaskCharConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Returns the first character of the value which must be a string. If length is greater than 1,
            raises an exception. If length is 0, returns character of value 0.
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.MaskCharConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts value which must be a character to string. If character of value 0 is specified, returns empty string.
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.SpinInfo.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Editors.DisplayCharBase">
            <summary>
            Base type for all DisplayCharacter classes.
            </summary>
            <remarks>
            <para class="body">
            When XamMaskedInput parses a mask (specified via XamMaskedInput's <see cref="P:Infragistics.Controls.Editors.XamMaskedInput.Mask"/> property),
            the result is a collection of <see cref="T:Infragistics.Controls.Editors.SectionBase"/>
            derived classes. Each Section in turn is a collection of display characters. Section's
            <see cref="P:Infragistics.Controls.Editors.SectionBase.DisplayChars"/> property returns the display characters of a section.
            XamMaskedInput returns the collection of sections via its <see cref="P:Infragistics.Controls.Editors.XamMaskedInput.Sections"/>
            property. It also exposes <see cref="P:Infragistics.Controls.Editors.XamMaskedInput.DisplayChars"/> property that returns 
            a collection of display characters that contains the aggregate display characters from all sections.
            </para>
            <para class="body">
            <b>Note:</b> Typically there is no need for you to directly create or use display characters.
            XamMaskedInput will automatically create and manage these objects based on the supplied mask.
            </para>
            <seealso cref="P:Infragistics.Controls.Editors.XamMaskedInput.Sections"/>
            <seealso cref="P:Infragistics.Controls.Editors.XamMaskedInput.DisplayChars"/>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Editors.DisplayCharBase.IncludeMethod">
            <summary>
            Returns or sets a value that specifies how InputMaskMode is used in deciding whether or not to include the character. 
            </summary>
            <remarks>
            <p class="body">When <b>IncludeMethod</b> is set to Always, the display character will always be included except when it is empty, in which case normal processing takes effect. (The mask is examined to determine whether a prompt character ot a pad character should be used.) If this property is set to Never, it will never be included in the text. The default setting (DisplayCharIncludeMethod.Default) is to look at the InputMaskMode that's being applied to the text and determine which character to use accordingly.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Editors.DisplayCharBase.DrawString">
            <summary>
            Returns the string that will be drawn by this display character.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.DisplayCharBase.MatchChar(System.Char)">
            <summary>
            Returns true if the specified character <paramref name="c"/> matches the mask
            </summary>
            <param name="c">Character to match</param>
            <remarks>
            <para class="body">
            MatchChar method is an abstract method that derived display character classes implement.
            This method returns a value indicating whether the specified character matches
            this display character. If this method returns False for a character, the user can not enter 
            that character in the place of this display character.
            </para>
            <para class="body">
            <b>Note:</b> Typically you don't need to use this method directly as the XamMaskedInput will
            automatically validate the user input against the specified mask.
            </para>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Editors.DisplayCharBase.IsEditable">
            <summary>
            Indicates if the character position is an editable position, one that
            user can input a character into. The literal characters will return False.
            </summary>
            <remarks>
            <para class="body">
            Literal display characters return False from this property where as the display 
            characters that are place holder for user input return True from this property.
            </para>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Editors.DisplayCharBase.Char">
            <summary>
            Returns the char associated with this character position.
            If it's an InputPositionBase derivative (character placeholder),
            it will return the character that the user has input, or 0 if it's empty.
            
            For LiteralPosition and derivatives, it will return the associated
            literal character.
            
            Set of this property will only work if IsEditable returns true, otherwise it 
            will throw an exception.
            </summary>
            <remarks>
            <para class="body">
            Gets or sets the character associated with this display character. When the user
            enters text into the editor, this property is updated with the entered character.
            As characters are entered, the caret moves so the next character will capture the
            next character user enters.
            </para>
            </remarks>
        </member>
        <member name="T:Infragistics.Controls.Editors.InputCharBase">
            <summary>
            Class that represents an editable position in the mask edit control
            </summary>
            <remarks>
            <para class="body">
            This DisplayCharBase derived class is an abstract base class for representing 
            character positions in the mask that are editable. See <see cref="T:Infragistics.Controls.Editors.DisplayCharBase"/> for
            more information.
            </para>
            <para class="body">
            <b>Note:</b> Typically there is no need for you to directly create or use display characters.
            XamMaskedInput will automatically create and manage these objects based on the supplied mask.
            </para>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Editors.InputCharBase.IsEditable">
            <summary>
            Overridden, returns true to indicate that InputPositionBase derivatives
            are editable character positions.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.InputCharBase.Char">
            <summary>
            returns the char associated with this character position.
            If it's an InputPositionBase derivative (character placeholder),
            it will return the character that the user has input, or 0 if it's empty
            
            For LiteralPosition and derivatives, it will return the 
            literal character that will be used in storing the text (if one
            of the DataMaskModes is to include literals)
            
            set will only work if IsEditable returns true, otherwise it will
            throw an exception
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Editors.LiteralChar">
            <summary>
            Class for matching literal characters.
            </summary>
            <remarks>
            <para class="body">
            LiteralChar represents literals in the mask. Literal characters are the characters that the user
            can not modify. For example, in the "###-##-####" mask the two occurrences of '-' are literal characters.
            </para>
            <para class="body">
            <b>Note:</b> Typically there is no need for you to directly create or use display characters.
            XamMaskedInput will automatically create and manage these objects based on the supplied mask.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.LiteralChar.MatchChar(System.Char)">
            <summary>
            returns true if the character passed in as parameter matches the 
            the literal this instance represents
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Controls.Editors.LiteralChar.Char">
            <summary>
            returns the char associated with this character position.
            If it's an InputPositionBase derivative (character placeholder),
            it will return the character that the user has input, or 0 if it's empty
            
            For LiteralPosition and derivatives, it will return the 
            literal character that will be used in storing the text (if one
            of the DataMaskModes is to include literals)
            
            set will only work if IsEditable returns true, otherwise it will
            throw an exception
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Editors.DecimalSeperatorChar">
            <summary>
            Class for representing the decimal seperators ('.') in number and currency
            sections.
            </summary>
            <remarks>
            <para class="body">
            DecimalSeperatorChar is a literal character that separates integer and fraction parts of
            a numeric mask.
            </para>
            <para class="body">
            <b>Note:</b> Typically there is no need for you to directly create or use display characters.
            XamMaskedInput will automatically create and manage these objects based on the supplied mask.
            </para>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Editors.DecimalSeperatorChar.Char">
            <summary>
            returns the char associated with this character position.
            If it's an InputPositionBase derivative (character placeholder),
            it will return the character that the user has input, or 0 if it's empty
            
            For LiteralPosition and derivatives, it will return the 
            literal character that will be used in storing the text (if one
            of the DataMaskModes is to include literals)
            
            set will only work if IsEditable returns true, otherwise it will
            throw an exception
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Editors.DigitChar">
            <summary>
            Class for matching digits.
            </summary>
            <remarks>
            <para class="body">
            DigitChar is a dispaly character that accepts a numeric character (0-9).
            Char.IsDigit is used to check if a character is numeric.
            </para>
            <para class="body">
            <b>Note:</b> Typically there is no need for you to directly create or use display characters.
            XamMaskedInput will automatically create and manage these objects based on the supplied mask.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.DigitChar.MatchChar(System.Char)">
            <summary>
            checks to see if specified character c mathces a digit
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Controls.Editors.AlphaChar">
            <summary>
            Class for matching alpha characters [A-Za-z]
            </summary>
            <remarks>
            <para class="body">
            AlphaChar is a dispaly character that accepts a alphabetic characters (A-Z and a-z).
            Char.IsLetter is used to check if a character is alphabetic character.
            </para>
            <para class="body">
            <b>Note:</b> Typically there is no need for you to directly create or use display characters.
            XamMaskedInput will automatically create and manage these objects based on the supplied mask.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.AlphaChar.MatchChar(System.Char)">
            <summary>
            checks to see if specified character c matches
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Controls.Editors.AlphanumericChar">
            <summary>
            Class for matching alpha and digits [A-Za-z0-9].
            </summary>
            <remarks>
            <para class="body">
            AlphanumericChar is a dispaly character that accepts a alpha-numeric characters (A-Z, a-z and 0-9).
            Char.IsLetterOrDigit is used to check if a character is alpha-numeric.
            </para>
            <para class="body">
            <b>Note:</b> Typically there is no need for you to directly create or use display characters.
            XamMaskedInput will automatically create and manage these objects based on the supplied mask.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.AlphanumericChar.MatchChar(System.Char)">
            <summary>
            checks to see if specified character c matches
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Controls.Editors.CharacterSet">
            <summary>
            Class for matching an arbitrary set of characters.
            </summary>
            <remarks>
            <para class="body">
            CharacterSet is a dispaly character that accepts any character that's part of
            an arbitrarily defined set. You can specify a character set in the mask using
            {char:n:set} mask token where n is number of display characters to create and
            set specifies the set of characters that are acceptable. Here is an example
            that creates two display characters that accept a, b, c, d, e, f and 0 to 9
            digit characters:<br/>
            "{char:2:abcdef0-9}"<br/>
            The set can include list of arbitrary characters as well as ranges. In above
            example, 'abcdef' is arbitrary character list where as 0-9 is a range. Ranges
            are inclusize.
            </para>
            <para class="body">
            <b>Note:</b> The character sets are case sensitive. If you want to accept both
            the upper and lower case of a character, include both the upper and lower case
            character in the list.
            </para>
            <para class="body">
            <b>Note:</b> Typically there is no need for you to directly create or use display characters.
            XamMaskedInput will automatically create and manage these objects based on the supplied mask.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.CharacterSet.MatchChar(System.Char)">
            <summary>
            checks to see if specified character c matches
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Controls.Editors.HexDigitChar">
            <summary>
            Class for matching hexadecimal digit.
            </summary>
            <para class="body">
            HexDigitChar is a dispaly character that accepts an hexadecimal digit (0-9, A-F and a-f).
            to include a hexadecimal character in the mask, use 'h' or 'H' mask character.
            </para>
            <para class="body">
            <b>Note:</b> Typically there is no need for you to directly create or use display characters.
            XamMaskedInput will automatically create and manage these objects based on the supplied mask.
            </para>
        </member>
        <member name="M:Infragistics.Controls.Editors.HexDigitChar.MatchChar(System.Char)">
            <summary>
            checks to see if specified character c matches
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.KeyboardAndForeignChar.MatchChar(System.Char)">
            <summary>
            checks to see if specified character c matches
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Controls.Editors.DisplayCharsCollection">
            <summary>
            Read-only collection that contains <see cref="T:Infragistics.Controls.Editors.DisplayCharBase"/> derived class instances.
            </summary>
            <remarks>
            <para class="body">
            Each section exposes a <see cref="P:Infragistics.Controls.Editors.SectionBase.DisplayChars"/> property that returns the
            display characters of that section. The XamMaskedInput's <see cref="P:Infragistics.Controls.Editors.XamMaskedInput.DisplayChars"/>
            property also returns a DisplayCharsCollection that contains all the display characters of 
            all the mask sections in the editor.
            </para>
            <para class="body">
            <b>Note:</b> Typically there is no need for you to directly create or use this class as
            the XamMaskedInput automatically creates and manages this when it parses the mask.
            </para>
            <para class="body">
            See <see cref="P:Infragistics.Controls.Editors.XamMaskedInput.Sections"/> for more information.
            </para>
            <seealso cref="P:Infragistics.Controls.Editors.SectionBase.DisplayChars"/>
            <seealso cref="P:Infragistics.Controls.Editors.XamMaskedInput.DisplayChars"/>
            <seealso cref="P:Infragistics.Controls.Editors.XamMaskedInput.Sections"/>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Editors.DisplayCharsCollection.Section">
            <summary>
            Returns the associated section object.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.DisplayCharsCollection.Clear">
            <summary>
            Clears the collection.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.EditInfo.ImeTextBox_TextInput(System.Object,System.Windows.Input.TextCompositionEventArgs,System.String)">
            <summary>
            Params 'e' and 'text' are exclusive.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.EditInfo.CurrentState">
            <summary>
            Returns bit flags that signify the current editing state of the control.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.EditInfo.ValidateChangeSection(Infragistics.Controls.Editors.SectionBase,Infragistics.Controls.Editors.SectionBase)">
            <summary>
            validates the from section. It returns true to proceed, and false to
            cancel the moving of input position from section to to section
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.EditInfo.ValidateAllSections">
            <summary>
            Calls ValidateSection on all the editable sections and returns
            true if all such calls return true. Otherwise it returns false.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.EditInfo.ValidateAllSections(System.Boolean)">
            <summary>
            Calls ValidateSection on all the editable sections and returns
            true if all such calls return true. Otherwise it returns false.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Controls.Editors.EditInfo.IsAnyTextSelected">
            <summary>
            returns true if any text is selected, otherwise false
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.EditInfo.IsCaretPositionInSelection(System.Int32)">
            <summary>
            Indicates if the caretPos is at the start of the selection or the end of the selection
            or anywhere in the selection.
            </summary>
            <param name="caretPos"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.EditInfo.IsDisplayCharSelected(Infragistics.Controls.Editors.DisplayCharBase)">
            <summary>
            Indicates if the specified display char is selected.
            </summary>
            <param name="dc"></param>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Controls.Editors.EditInfo.IsAfterLastCharacter">
            <summary>
            indicates if the caret position is after the last char
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.EditInfo.IsAtFirstChar">
            <summary>
            indicates if the caret position is at the first char
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.EditInfo.SkipDisplayCharsWithEmptyDrawString(System.Int32)">
            <summary>
            This method skips display chars whose GetDrawChar return 0, which can happen when prompt char is 0. 
            Returns the caretPos of the next display char whose GetDrawChar( ) is not 0.
            </summary>
            <param name="caretPos"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.EditInfo.CanSpin(System.Boolean,System.Object)">
            <summary>
            Indicates whether current section can be incremented or decremented.
            </summary>
            <param name="up">True for incremenet, false for decrement.</param>
            <param name="amount">Optional - amount by which to increment or decrement.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.EditInfo.GetInputPositionInSelection(System.Char)">
            <summary>
            Returns the display char at which the input processing should start when some text
            is selected and a character is input.
            </summary>
            <returns>Overall position of the display char.</returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.EditInfo.ProcessRTLInputSectionOverride(Infragistics.Controls.Editors.DisplayCharBase,System.Char)">
            <summary>
            If the character being entered does not match the current editable character but the 
            previous section is a right-to-left section and the character can be input there then
            returns the previous section.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.EditInfo.ConstraintCaretToFilledCharacters">
            <summary>
            Indicates whether to allow the caret to be on a character after the right-most filled display char. 
            Default value is false. Resolved to true when the PromptChar is set to 0 character.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Editors.InvalidValueBehavior">
            <summary>
            Specifies the <see cref="P:Infragistics.Controls.Editors.ValueInput.InvalidValueBehavior"/> property.
            </summary>
            <see cref="P:Infragistics.Controls.Editors.ValueInput.InvalidValueBehavior"/>
        </member>
        <member name="F:Infragistics.Controls.Editors.InvalidValueBehavior.Default">
            <summary>
            Default is resolved to <b>DisplayErrorMessageAndRevertValue</b>.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.InvalidValueBehavior.RetainValue">
            <summary>
            Retain value and stay in edit mode.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.InvalidValueBehavior.RevertValue">
            <summary>
            Revert value to original value.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.InvalidValueBehavior.DisplayErrorMessage">
            <summary>
            Display an error message and retain value.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.InvalidValueBehavior.DisplayErrorMessageAndRevertValue">
            <summary>
            Display an error message and revert value.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Editors.EditOrientation">
            <summary>
            Enum associated with the <see cref="P:Infragistics.Controls.Editors.EditSectionBase.Orientation"/> property of the <see cref="T:Infragistics.Controls.Editors.EditSectionBase"/> class.
            </summary>
            <remarks>
            <para class="body">
            <b>Note:</b> Typically there is no need for you to specify this property or use this enum
            directly. The XamMaskedInput will set the associated property automatically based on the
            mask.
            </para>
            <seealso cref="P:Infragistics.Controls.Editors.EditSectionBase.Orientation"/>
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Editors.EditOrientation.LeftToRight">
            <summary>
            The section is a left-to-right section.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.EditOrientation.RightToLeft">
            <summary>
            The section is a right-to-left section.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Editors.DisplayCharIncludeMethod">
            <summary>
            This enumeration is used to specify the value for <see cref="P:Infragistics.Controls.Editors.DisplayCharBase.IncludeMethod"/> 
            property. It dictates how a value of a DisplayChar is included when applying
            mask to get the text.
            </summary>
            <remarks>
            <para class="body">
            <b>Note:</b> Typically there is no need for you to specify this property or use this enum
            directly. The XamMaskedInput will set the associated property automatically based on the
            mask.
            </para>
            <seealso cref="P:Infragistics.Controls.Editors.DisplayCharBase.IncludeMethod"/>
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Editors.DisplayCharIncludeMethod.Default">
            <summary>
            Default is to look at the mask mode in deciding whether to include
            or not.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.DisplayCharIncludeMethod.Always">
            <summary>
            Always include the DisplayChar
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.DisplayCharIncludeMethod.Never">
            <summary>
            Never include the DisplayChar
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Editors.FilterType">
            <summary>
            Used to specify the type of converting is to be done on an input character.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.FilterType.Unchanged">
            <summary>
            Unchanged, character will be unchanged
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.FilterType.LowerCase">
            <summary>
            character will be converted to lower case
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.FilterType.UpperCase">
            <summary>
            character will be converted to upper case
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Editors.InputMaskMode">
            <summary>
            Used for specifying the mode to be applied when getting text from a 
            MaskedInput.
            </summary>
            <remarks>
            <seealso cref="P:Infragistics.Controls.Editors.XamMaskedInput.DataMode"/>
            <seealso cref="P:Infragistics.Controls.Editors.XamMaskedInput.DisplayMode"/>
            <seealso cref="P:Infragistics.Controls.Editors.XamMaskedInput.ClipMode"/>
            <seealso cref="M:Infragistics.Controls.Editors.XamMaskedInput.GetText(Infragistics.Controls.Editors.InputMaskMode)"/>
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Editors.InputMaskMode.Raw">
            <summary>
            Raw Data Mode. Only significant characters will be
            returned. Any prompt characters or literals will be excluded 
            from the text.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.InputMaskMode.IncludeLiterals">
            <summary>
            (Default) Include Literal Characters. Data and literal characters will 
            be returned. Prompt characters will be omitted.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.InputMaskMode.IncludePromptChars">
            <summary>
            Include Prompt Characters. Data and prompt characters will be 
            returned. Literals will be omitted.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.InputMaskMode.IncludeBoth">
            <summary>
            Include both Prompt Characters and Literals. Text will be 
            returned exactly as it appears in the object when a cell is
            in edit mode. Data, prompt character and literals will all be 
            included.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.InputMaskMode.IncludeLiteralsWithPadding">
            <summary>
            Include Literals With Padding. Prompt characters will be 
            converted into pad characters (by default they are spaces,
            which are then included with literals and data when text 
            is returned.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.SignDisplayType.None">
            <summary>
            No sign support in the section, so the section will always contain positive numbers.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.SignDisplayType.ShowWhenNegative">
            <summary>
            Sign will only be displayed when the value is negative.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.SignDisplayType.ShowAlways">
            <summary>
            Sign will always be displayed (+ when positive, - when negative).
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Editors.MaskedEditTabNavigation">
            <summary>
            Used for specifying XamMaskedInput's <see cref="P:Infragistics.Controls.Editors.XamMaskedInput.SectionTabNavigation"/> property.
            </summary>
            <seealso cref="P:Infragistics.Controls.Editors.XamMaskedInput.SectionTabNavigation"/>
        </member>
        <member name="F:Infragistics.Controls.Editors.MaskedEditTabNavigation.NextControl">
            <summary>
            Tab to the next control
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.MaskedEditTabNavigation.NextSection">
            <summary>
            Tab to the next section or to the next control if focus is in the last section. 
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Editors.MaskSelectAllBehavior">
            <summary>
            Used for specifying XamMaskedInput's <see cref="P:Infragistics.Controls.Editors.XamMaskedInput.SelectAllBehavior"/> property.
            </summary>
            <remarks>
            <see cref="P:Infragistics.Controls.Editors.XamMaskedInput.SelectAllBehavior"/>
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Editors.MaskSelectAllBehavior.SelectAllCharacters">
            <summary>
            Select all characters.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.MaskSelectAllBehavior.SelectEnteredCharacters">
            <summary>
            Select entered characters, including intervening empty characters and adjacent literals.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Editors.AutoFillDate">
            <summary>
            Used for specifying XamMaskedInput's <see cref="P:Infragistics.Controls.Editors.XamMaskedInput.AutoFillDate"/> property.
            </summary>
            <remarks>
            <seealso cref="P:Infragistics.Controls.Editors.XamMaskedInput.AutoFillDate"/>
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Editors.AutoFillDate.None">
            <summary>
            Do not auto-fill.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.AutoFillDate.Year">
            <summary>
            Auto-fill year.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.AutoFillDate.MonthAndYear">
            <summary>
            Auto-fill month and year.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Editors.SpinButtonDisplayMode">
            <summary>
            Used for specifying the XamMaskedInput's <see cref="P:Infragistics.Controls.Editors.XamMaskedInput.SpinButtonDisplayMode"/> property.
            </summary>
            <seealso cref="P:Infragistics.Controls.Editors.XamMaskedInput.SpinButtonDisplayMode"/>
        </member>
        <member name="F:Infragistics.Controls.Editors.SpinButtonDisplayMode.Never">
            <summary>
            Never display the button.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.SpinButtonDisplayMode.Always">
            <summary>
            Always display the button.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.SpinButtonDisplayMode.MouseOver">
            <summary>
            Display the button when the mouse is over. Note that this option will always display
            the button when the editor is in edit mode.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.SpinButtonDisplayMode.Focused">
            <summary>
            Display the button when the editor is focus.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Editors.EditModeValidationErrorEventArgs">
            <summary>
            Event arguments for routed event <see cref="E:Infragistics.Controls.Editors.ValueInput.ValidationError"/>
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.EditModeValidationErrorEventArgs.#ctor(Infragistics.Controls.Editors.ValueInput,System.Exception,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.Editors.EditModeValidationErrorEventArgs"/> class
            </summary>
            <param name="editor">The editor for which the event is being raised.</param>
            <param name="exception">The exception associated with the validation error</param>
            <param name="errorMessage">A string containing the error message associated with the validation error</param>
        </member>
        <member name="P:Infragistics.Controls.Editors.EditModeValidationErrorEventArgs.Editor">
            <summary>
            Gets the associated value editor.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.EditModeValidationErrorEventArgs.InvalidValueBehavior">
            <summary>
            Gets or sets the invalid value behavior.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.EditModeValidationErrorEventArgs.ErrorMessage">
            <summary>
            Gets or sets the error message.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.EditModeValidationErrorEventArgs.Exception">
            <summary>
            Gets any exception associated with the validation error.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Editors.InvalidOperationEventArgs">
            <summary>
            InvalidOperationEventArgs class for firing InvalidOperation event.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.InvalidOperationEventArgs.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:Infragistics.Controls.Editors.InvalidOperationEventArgs.Message">
            <summary>
            gets the message associated with an illegal operation user was
            trying to perform
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.InvalidOperationEventArgs.Beep">
            <summary>
            you can set this property to false to prevent the masked edit from 
            beeping.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Editors.InvalidCharEventArgs">
            <summary>
            InvalidCharEventArgs class for firing <see cref="E:Infragistics.Controls.Editors.XamMaskedInput.InvalidChar"/> event of the XamMaskedInput.
            </summary>
            <remarks>
            <seealso cref="E:Infragistics.Controls.Editors.XamMaskedInput.InvalidChar"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.InvalidCharEventArgs.#ctor(System.Char,Infragistics.Controls.Editors.DisplayCharBase)">
            <summary>
            Constructor
            </summary>
            <param name="c">Invalid character that was typed</param>
            <param name="dc">The display character placeholder where the invalid character was typed</param>
        </member>
        <member name="P:Infragistics.Controls.Editors.InvalidCharEventArgs.Char">
            <summary>
            Gets the invalid character that the user attempted to input.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.InvalidCharEventArgs.DisplayChar">
            <summary>
            Gets the display character instance where the user attempted to enter the invalid character.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.InvalidCharEventArgs.Beep">
            <summary>
            Gets or sets a value indicating whether the XamMaskedInput should beep.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.MaskParser.AdjustNonstandardForeignDateMask(System.String@)">
            <summary>
            If the current culture requires a non-standard mask for dates (such as in Japan) then
            this method inserts a '/' character after the last date section in the mask.  This
            allows the analyze method to successfully insert the special postfix character after that
            last date section.
            </summary>
            <param name="mask">A reference to the mask to be analyzed and modified, if appropriate.</param>
        </member>
        <member name="T:Infragistics.Controls.Editors.ParsedMask">
            <summary>
            A class for applying a mask to data.
            </summary>
            <remarks>
            <para class="body">
            <b>ParsedMask</b> parses and stores the parsed mask. It exposes <see cref="M:Infragistics.Controls.Editors.ParsedMask.ApplyMask(System.String,Infragistics.Controls.Editors.InputMaskMode)"/>
            method for applying the associated mask to the specified data.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.ParsedMask.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="mask">The mask</param>
        </member>
        <member name="M:Infragistics.Controls.Editors.ParsedMask.#ctor(System.String,System.IFormatProvider)">
            <summary>
            Constructor.
            </summary>
            <param name="mask">The mask</param>
            <param name="formatProvider">The format provider to use to get culture sensitive symbols</param>
        </member>
        <member name="M:Infragistics.Controls.Editors.ParsedMask.#ctor(System.String,System.IFormatProvider,System.Char,System.Char)">
            <summary>
            Constructor.
            </summary>
            <param name="mask">The mask</param>
            <param name="formatProvider">The format provider to use to get culture sensitive symbols</param>
            <param name="promptCharacter">The prompt character - only applicable when applying mask with certain mask modes.</param>
            <param name="padCharacter">The prompt character - only applicable when applying mask with certain mask modes.</param>
        </member>
        <member name="M:Infragistics.Controls.Editors.ParsedMask.ApplyMask(System.String,Infragistics.Controls.Editors.InputMaskMode)">
            <summary>
            Applies the mask to the specified data.
            </summary>
            <param name="data">Data to apply the mask to.</param>
            <param name="maskMode">Mask mode to use.</param>
            <returns>String that results from applying mask to the specified data.</returns>
        </member>
        <member name="P:Infragistics.Controls.Editors.ParsedMask.Mask">
            <summary>
            Returns the associated mask.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ParsedMask.PromptCharacter">
            <summary>
            Returns the associated prompt character. Used only when applying mask with certain mask modes.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ParsedMask.PadCharacter">
            <summary>
            Returns the associated pad character. Used only when applying mask with certain mask modes.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Editors.ISupportsSelectableText">
            <summary>
            Interface implemented by ValueInput derived classes that support selecting text.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ISupportsSelectableText.SelectionStart">
            <summary>
            Gets/sets the starting location of the selected text.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ISupportsSelectableText.SelectionLength">
            <summary>
            Gets/sets the length of the selected text.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ISupportsSelectableText.SelectedText">
            <summary>
            Gets/sets the selected text.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ISupportsSelectableText.TextLength">
            <summary>
            Gets the total length of text in the editor.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ISupportsSelectableText.SelectAll">
            <summary>
            Selects all text.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.MaskInfo.InternalRefreshValue(System.Object)">
            <summary>
            Gets the value from the owner and sets it on the display chars
            collection.
            </summary>
            <returns>
            If a value indicating whether the value was successfully set.
            </returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.MaskInfo.InternalRefreshValue(System.Object,System.Exception@)">
            <summary>
            Gets the value from the owner and sets it on the display chars
            collection.
            </summary>
            <returns>
            If there's an error (for example the specified value doesn't match the mask), 
            returns the error information. Otherwise returns null.
            </returns>
        </member>
        <member name="P:Infragistics.Controls.Editors.MaskInfo.IsBeingEditedAndFocused">
            <summary>
            Returns true if in edit mode and the associated control is focused.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.MaskInfo.MaskCache.Equals(System.Object)">
            <summary>
            Indicates whether this object is equal to the passed in obj.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.MaskInfo.MaskCache.GetHashCode">
            <summary>
            Rerturns thehas code of the object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Controls.Editors.MaskInfo.Sections">
            <summary>
            A collection of the edit sections in the edit portion of the control. Each edit section is usually seperated by literal
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.MaskInfo.DesignMode">
            <summary>
            Indicates if the control is in design mode.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Editors.SectionBase">
            <summary>
            Abstract base class for all section classes.
            </summary>
            <remarks>
            <para class="body">
            When XamMaskedInput parses a mask (specified via XamMaskedInput's <see cref="P:Infragistics.Controls.Editors.XamMaskedInput.Mask"/> property),
            the result is a collection of SectionBase derived classes. Each Section in turn is a collection of display 
            characters. Section's <see cref="P:Infragistics.Controls.Editors.SectionBase.DisplayChars"/> property returns the display characters of a 
            section. XamMaskedInput returns the collection of sections via its <see cref="P:Infragistics.Controls.Editors.XamMaskedInput.Sections"/>
            property. It also exposes <see cref="P:Infragistics.Controls.Editors.XamMaskedInput.DisplayChars"/> property that returns 
            a collection of display characters that contains the aggregate display characters from all sections.
            </para>
            <para class="body">
            <b>Note:</b> Typically there is no need for you to directly create or use sections.
            XamMaskedInput will automatically create and manage these objects based on the supplied mask.
            </para>
            <seealso cref="P:Infragistics.Controls.Editors.XamMaskedInput.Sections"/>
            <seealso cref="P:Infragistics.Controls.Editors.XamMaskedInput.DisplayChars"/>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Editors.SectionBase.Sections">
            <summary>
            Returns the sections collection this section belongs to.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.SectionBase.DisplayChars">
            <summary>
            Returns the display characters of this section.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.SectionBase.ValidateString(System.String@)">
            <summary>
            Checks if str is a valid string for this section.
            Either returns <paramref name="str"/> itself or returns a modified string that is to be displayed.
            Returns null to indicate that validation failed
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Controls.Editors.SectionBase.PreviousSection">
            <summary>
            Finds the previous section.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Controls.Editors.SectionBase.PreviousLiteralSection">
            <summary>
            Returns the previous literal section, skipping any edit sections.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Controls.Editors.SectionBase.NextSection">
            <summary>
            Returns the next section.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Controls.Editors.SectionBase.PreviousEditSection">
            <summary>
            Returns the previous edit section.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Controls.Editors.SectionBase.NextEditSection">
            <summary>
            Returns the next edit section, skipping any literal sections.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.SectionBase.NextLiteralSection">
            <summary>
            Returns the next literal section, skipping any edit sections.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.SectionBase.GetText">
            <summary>
            Returns the text for this section.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Controls.Editors.LiteralSection">
            <summary>
            LiteralSection class.
            </summary>
            <remarks>
            <para class="body">
            A LiteralSection is created for each continous occurrences of literals in the mask.
            </para>
            <para class="body">
            <b>Note:</b> Typically there is no need for you to directly create or use sections.
            XamMaskedInput will automatically create and manage these objects based on the supplied mask.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.LiteralSection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.Editors.LiteralSection"/> class
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.LiteralSection.SetFilterToAllChars(Infragistics.Controls.Editors.FilterType)">
            <summary>
            overridden method does nothing
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:Infragistics.Controls.Editors.LiteralSection.ValidateString(System.String@)">
            <summary>
            Validates the string for this section.
            </summary>
            This method checks to see if the specified string is a valid string for this section. It may modify the specified string in which case the new string will be close to the specified string, but one that matches the section. This method returns False to indicate that validation failed.
            <param name="str">string to validate</param>
            <returns><b>True</b> if string is valid, <b>false</b> otherwise</returns>
        </member>
        <member name="T:Infragistics.Controls.Editors.EditSectionBase">
            <summary>
            Abstract base class for non-literal sections.
            </summary>
            <remarks>
            <para class="body">
            EditSectionBase is a base class for all editable sections.
            </para>
            <para class="body">
            <b>Note:</b> Typically there is no need for you to directly create or use sections.
            XamMaskedInput will automatically create and manage these objects based on the supplied mask.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.EditSectionBase.SafeDisplayCharAt(System.Int32)">
            <summary>
            Returns character in DisplayChars collection at index.
            </summary>
            <param name="index">index of char to display</param>
            <returns>character at position or null if not found.</returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.EditSectionBase.SetText(System.String)">
            <summary>
            Assigns the text to the section. Call to this method with an invalid text will result in an exception.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Infragistics.Controls.Editors.EditSectionBase.ValidateSection">
            <summary>
            Validates the section
            </summary>
            This method is usually invoked when the input position is being removed from the section. It returns True if an appropriate value has been input in the section. This function may modify the values of display characters.
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.EditSectionBase.ValidateSection(System.Boolean)">
            <summary>
            Validates the section.
            </summary>
            <remarks>
            This method is usually invoked when the input position is being removed from the section. It returns True if an appropriate value has been input in the section. This function may modify the values of display characters.
            </remarks>
            <param name="contentModificationsAllowed">Whether the implementation should modify the contents.</param>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Controls.Editors.EditSectionBase.Orientation">
            <summary>
            Returns whether editing is left-to-right or right-to-left.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Editors.DisplayCharsEditSection">
            <summary>
            This is an edit section that can contain an arbitrary list of editable display characters.
            </summary>
            <remarks>
            <para class="body">
            DisplayCharsEditSection is created for each group of consecutive editable characters in the mask.
            Note that this section is create for editable characters that do not have their own special sections
            associated with. For example, "mm", "dd", and "yyyy" have <see cref="T:Infragistics.Controls.Editors.MonthSection"/>, 
            <see cref="T:Infragistics.Controls.Editors.DaySection"/> and <see cref="T:Infragistics.Controls.Editors.YearSection"/> associated with them so for these the
            DisplayCharsEditSection is not created. However for other mask characters for which there are
            no special sections associated with them, this object will be created for a group of continuous
            edit mask character in the mask.
            </para>
            <para class="body">
            <b>Note:</b> Typically there is no need for you to directly create or use sections.
            XamMaskedInput will automatically create and manage these objects based on the supplied mask.
            </para>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Editors.DisplayCharsEditSection.Orientation">
            <summary>
            indicates whether this section is a right-to-left edit section (number section)
            or a left-to-right (regular edit sections)
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.DisplayCharsEditSection.SetText(System.String)">
            <summary>
            Assigns the text to the section. Call to this method with an invalid text will result in an exception.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Infragistics.Controls.Editors.DisplayCharsEditSection.ValidateString(System.String@)">
            <summary>
            Checks if str is a valid string for this section.
            Either returns itself or returns a modified string that is to be displayed.
            Returns false to indicate that validation failed
            </summary>
            <param name="str">string to validate</param>
            <returns><b>True</b> if valid, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.DisplayCharsEditSection.ValidateSection(System.Boolean)">
            <summary>
            checks to see if the so far input chars in the section
            satisfy the input requirement for the section
            </summary>
            <param name="contentModificationsAllowed">Whether or not to allow content modification</param>
            <returns><b>True</b> if valid, <b>false</b> otherwise.</returns>
        </member>
        <member name="T:Infragistics.Controls.Editors.NumberSection">
            <summary>
            A number section that will edit from right to left.
            </summary>
            <remarks>
            <para class="body">
            DisplayCharsEditSection is created for each group of consecutive editable characters in the mask.
            Note that this section is create for editable characters that do not have their own special sections
            associated with. For example, "mm", "dd", and "yyyy" have <see cref="T:Infragistics.Controls.Editors.MonthSection"/>, 
            <see cref="T:Infragistics.Controls.Editors.DaySection"/> and <see cref="T:Infragistics.Controls.Editors.YearSection"/> associated with them so for these the
            DisplayCharsEditSection is not created. However for other mask characters for which there are
            no special sections associated with them, this object will be created for a group of continuous
            edit mask characters in the mask.
            </para>
            <para class="body">
            <b>Note:</b> Typically there is no need for you to directly create or use sections.
            XamMaskedInput will automatically create and manage these objects based on the supplied mask.
            </para>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Editors.NumberSection.FractionPart">
            <summary>
            Returns the associated fraction part.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.NumberSection.IsFractionPartNonEmpty">
            <summary>
            Returns true if there's an associated fraction part and it's not empty.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.NumberSection.MinValue">
            <summary>
            min value for this section
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.NumberSection.MaxValue">
            <summary>
            max value for this section
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.NumberSection.HasOnlySignSymbol">
            <summary>
            Returns true if the only character filled in the number section is either '+' or '-';
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.NumberSection.SetText(System.String)">
            <summary>
            Assigns the text to the section. Call to this method with an invalid text will result in an exception.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Infragistics.Controls.Editors.NumberSection.ShiftLeft(System.Int32,System.Int32)">
             <summary>
            Overridden. Throws an InvalidOperationException exception
             since this function is invalid for a number section 
             </summary>
             <param name="from"></param>
             <param name="positionsToShift"></param>
             <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.NumberSection.ValidateString(System.String@)">
            <summary>
            Returns true if string str matches the mask associated with this section
            </summary>
            <param name="str">string to validate</param>
            <returns><b>true</b> if valid, <b>false</b> otherwise</returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.NumberSection.ValidateSection(System.Boolean)">
            <summary>
            if the input in this section matches the mask.
            </summary>
            <param name="contentModificationsAllowed">Whether or not modifications are allowed</param>
            <returns><b>true</b> if valid, <b>false</b> otherwise</returns>
        </member>
        <member name="P:Infragistics.Controls.Editors.NumberSection.Orientation">
            <summary>
            overridden. returns RightToLeft to indicate that this section
            is to be edited right-to-left
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.NumberSection.CreateDisplayChars">
            <summary>
            Creates display chars associated with this edit section to the passed
            in displayChars collection.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Editors.MonthSection">
            <summary>
            Month section part of a date mask.
            </summary>
            <remarks>
            <para class="body">
            MonthSection represents the month portion of a date mask.
            </para>
            <para class="body">
            <b>Note:</b> Typically there is no need for you to directly create or use sections.
            XamMaskedInput will automatically create and manage these objects based on the supplied mask.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.MonthSection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.Editors.MonthSection"/> class
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.MonthSection.ValidateString(System.String@)">
            <summary>
            ValidateString
            </summary>
            <param name="str">string to validate</param>
            <returns><b>True</b> if valid, <b>false</b> otherwise</returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.MonthSection.ValidateSection(System.Boolean)">
            <summary>
            ValidateSection
            </summary>
            <param name="contentModificationsAllowed">Whether or not contents can be modified</param>
            <returns><b>True</b> if valid, <b>false</b> otherwise</returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.MonthSection.SetText(System.String)">
            <summary>
            Assigns the text to the section. Call to this method with an invalid text will result in an exception.
            </summary>
            <param name="text"></param>
        </member>
        <member name="T:Infragistics.Controls.Editors.DaySection">
            <summary>
            Day section part of a date mask.
            </summary>
            <remarks>
            <para class="body">
            DaySection represents the day portion of a date mask.
            </para>
            <para class="body">
            <b>Note:</b> Typically there is no need for you to directly create or use sections.
            XamMaskedInput will automatically create and manage these objects based on the supplied mask.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.DaySection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.Editors.DaySection"/> class
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.DaySection.ValidateString(System.String@)">
            <summary>
            ValidateString
            </summary>
            <param name="str">string to validate</param>
            <returns><b>True</b> if valid, <b>false</b> otherwise</returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.DaySection.SetText(System.String)">
            <summary>
            Assigns the text to the section. Call to this method with an invalid text will result in an exception.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Infragistics.Controls.Editors.DaySection.ValidateSection(System.Boolean)">
            <summary>
            ValidateSection
            </summary>
            <param name="contentModificationsAllowed">Whether or not contents can be modified</param>
            <returns><b>True</b> if valid, <b>false</b> otherwise</returns>
        </member>
        <member name="T:Infragistics.Controls.Editors.YearSection">
            <summary>
            Year section of a date mask.
            </summary>
            <remarks>
            <para class="body">
            YearSection represents the year portion of a date mask. The section can be two digits year section
            or four digits year section.
            </para>
            <para class="body">
            <b>Note:</b> Typically there is no need for you to directly create or use sections.
            XamMaskedInput will automatically create and manage these objects based on the supplied mask.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.YearSection.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.Editors.YearSection"/> class
            </summary>
            <param name="isFourDigits">indicates if year section is 4 digits or 2 digits</param>
        </member>
        <member name="M:Infragistics.Controls.Editors.YearSection.ValidateSection(System.Boolean)">
            <summary>
            ValidateSection
            </summary>
            <param name="contentModificationsAllowed">Whether or not contents can be modified</param>
            <returns><b>True</b> if valid, <b>false</b> otherwise</returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.YearSection.SetText(System.String)">
            <summary>
            Assigns the text to the section. Call to this method with an invalid text will result in an exception.
            </summary>
            <param name="text"></param>
        </member>
        <member name="T:Infragistics.Controls.Editors.HourSection">
            <summary>
            Hour section of a time mask.
            </summary>
            <remarks>
            <para class="body">
            HourSection represents the hour portion of a time mask.
            </para>
            <para class="body">
            <b>Note:</b> Typically there is no need for you to directly create or use sections.
            XamMaskedInput will automatically create and manage these objects based on the supplied mask.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.HourSection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.Editors.HourSection"/> class
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.HourSection.ValidateString(System.String@)">
            <summary>
            ValidateString
            </summary>
            <param name="str">string to validate</param>
            <returns><b>True</b> if valid, <b>false</b> otherwise</returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.HourSection.SetText(System.String)">
            <summary>
            Assigns the text to the section. Call to this method with an invalid text will result in an exception.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Infragistics.Controls.Editors.HourSection.ValidateSection(System.Boolean)">
            <summary>
            ValidateSection
            </summary>
            <param name="contentModificationsAllowed">Whether or not contents can be modified</param>
            <returns><b>True</b> if valid, <b>false</b> otherwise</returns>
        </member>
        <member name="T:Infragistics.Controls.Editors.AMPMSection">
            <summary>
            Class for AM-PM section of a time mask.
            </summary>
            <remarks>
            <para class="body">
            AMPMSection represents the AM/PM portion of a time mask.
            </para>
            <para class="body">
            <b>Note:</b> Typically there is no need for you to directly create or use sections.
            XamMaskedInput will automatically create and manage these objects based on the supplied mask.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.AMPMSection.CustomDisplayChar.MatchChar(System.Char)">
            <summary>
            checks to see if specified character c matches
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Controls.Editors.AMPMSection.CustomDisplayChar.Char">
            <summary>
            Overridden
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.AMPMSection.ValidateSection(System.Boolean)">
            <summary>
            ValidateSection
            </summary>
            <param name="contentModificationsAllowed">Whether or not contents can be modified</param>
            <returns><b>True</b> if valid, <b>false</b> otherwise</returns>
        </member>
        <member name="T:Infragistics.Controls.Editors.MinuteSection">
            <summary>
            Minute section of a time mask.
            </summary>
            <remarks>
            <para class="body">
            MinuteSection represents minute portion of a time mask.
            </para>
            <para class="body">
            <b>Note:</b> Typically there is no need for you to directly create or use sections.
            XamMaskedInput will automatically create and manage these objects based on the supplied mask.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.MinuteSection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.Editors.MinuteSection"/> class
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.MinuteSection.ValidateString(System.String@)">
            <summary>
            ValidateString
            </summary>
            <param name="str">string to validate</param>
            <returns><b>True</b> if valid, <b>false</b> otherwise</returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.MinuteSection.ValidateSection(System.Boolean)">
            <summary>
            ValidateSection
            </summary>
            <param name="contentModificationsAllowed">Whether or not contents can be modified</param>
            <returns><b>True</b> if valid, <b>false</b> otherwise</returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.MinuteSection.SetText(System.String)">
            <summary>
            Assigns the text to the section. Call to this method with an invalid text will result in an exception.
            </summary>
            <param name="text"></param>
        </member>
        <member name="T:Infragistics.Controls.Editors.SecondSection">
            <summary>
            Second section of a time mask.
            </summary>
            <remarks>
            <para class="body">
            SecondSection represents second portion of a time mask.
            </para>
            <para class="body">
            <b>Note:</b> Typically there is no need for you to directly create or use sections.
            XamMaskedInput will automatically create and manage these objects based on the supplied mask.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.SecondSection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.Editors.SecondSection"/> class
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.SecondSection.ValidateString(System.String@)">
            <summary>
            ValidateString
            </summary>
            <param name="str">string to validate</param>
            <returns><b>True</b> if valid, <b>false</b> otherwise</returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.SecondSection.SetText(System.String)">
            <summary>
            Assigns the text to the section. Call to this method with an invalid text will result in an exception.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Infragistics.Controls.Editors.SecondSection.ValidateSection(System.Boolean)">
            <summary>
            ValidateSection
            </summary>
            <param name="contentModificationsAllowed">Whether or not contents can be modified</param>
            <returns><b>True</b> if valid, <b>false</b> otherwise</returns>
        </member>
        <member name="T:Infragistics.Controls.Editors.FractionPart">
            <summary>
            Edit section implementation for a fraction part.
            </summary>
            <remarks>
            <para class="body">
            FractionPart represents the fraction part of a numeric mask.
            </para>
            <para class="body">
            <b>Note:</b> Typically there is no need for you to directly create or use sections.
            XamMaskedInput will automatically create and manage these objects based on the supplied mask.
            </para>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Editors.FractionPart.NumberOfDigits">
            <summary>
            Number of digits in this fraction part.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.FractionPart.SetText(System.String)">
            <summary>
            Assigns the text to the section. Call to this method with an invalid text will result in an exception.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Infragistics.Controls.Editors.FractionPart.ValidateSection(System.Boolean)">
            <summary>
            ValidateSection.
            </summary>
            <param name="contentModificationsAllowed">Whether or not contents can be modified</param>
            <returns><b>True</b> if valid, <b>false</b> otherwise</returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.FractionPart.TrimInsignificantZeros">
            <summary>
            Trims zeros at the end of the input.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.FractionPart.Orientation">
            <summary>
            Returns whether editing is left-to-right or right-to-left.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.FractionPart.ValidateString(System.String@)">
            <summary>
            ValidateString.
            </summary>
            <param name="str">string to validate</param>
            <returns><b>True</b> if valid, <b>false</b> otherwise</returns>
        </member>
        <member name="T:Infragistics.Controls.Editors.FractionPartContinuous">
            <summary>
            Edit section implementation for a fraction part.
            </summary>
            <remarks>
            <para class="body">
            FractionPartContinous represents the fraction part of a numeric mask. This differs from
            <see cref="T:Infragistics.Controls.Editors.FractionPart"/> in that this section will allow digits entered into the fraction
            part to flow into the integer part as the fraction part gets filled up. This allows for
            convenient entering of values without having to enter the '.' character. You specify
            this kind of fraction section in the mask using "{double:-n.m:c}" mask token where 'n'
            is the number of digits in integer portion, 'm' the number of digits in the fraction portion
            and 'c' for continous fraction part. See the associated entry in the table of masks
            in the <a href="xaminputs-masks.html">Masks</a> topic for more information.
            </para>
            <para class="body">
            <b>Note:</b> Typically there is no need for you to directly create or use sections.
            XamMaskedInput will automatically create and manage these objects based on the supplied mask.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.FractionPartContinuous.ValidateSection(System.Boolean)">
            <summary>
            ValidateSection.
            </summary>
            <param name="contentModificationsAllowed">Whether or not contents can be modified</param>
            <returns><b>True</b> if valid, <b>false</b> otherwise</returns>
        </member>
        <member name="P:Infragistics.Controls.Editors.FractionPartContinuous.Orientation">
            <summary>
            Returns whether editing is left-to-right or right-to-left.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Editors.SectionsCollection">
            <summary>
            Read-only collection that contains <see cref="T:Infragistics.Controls.Editors.SectionBase"/> derived class instances.
            </summary>
            <remarks>
            <para class="body">
            XamMaskedInput creates this collection when it parses its mask. XamMaskedInput's
            <see cref="P:Infragistics.Controls.Editors.XamMaskedInput.Sections"/> property returns this collection.
            See <see cref="P:Infragistics.Controls.Editors.XamMaskedInput.Sections"/> for more information.
            </para>
            <para class="body">
            <b>Note:</b> Typically there is no need for you to directly create or use this class as
            the XamMaskedInput automatically creates and manages this when it parses the mask.
            </para>
            <seealso cref="P:Infragistics.Controls.Editors.XamMaskedInput.Sections"/>
            <seealso cref="P:Infragistics.Controls.Editors.SectionBase.DisplayChars"/>
            <seealso cref="P:Infragistics.Controls.Editors.XamMaskedInput.DisplayChars"/>
            </remarks>
        </member>
        <member name="T:Infragistics.Controls.Editors.TextInputBase">
            <summary>
            Abstract base class for text based value editors.
            </summary>
            <remarks>
            <para class="body">
            <b>TextInputBase</b> class is an abstract base class from which text based
            value editors derive.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.TextInputBase.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Controls.Editors.TextInputBase"/>
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.TextInputBase.DoInitialization">
            <summary>
            Overridden. Called from OnInitialized to provide the derived classes an opportunity to 
            perform appropriate initialization tasks. OnInitialized implementation enters
            the editor into edit mode at the end if AlwaysInEditMode is true. This method 
            is called before that.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.TextInputBase.ProcessPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Overridden. Called when a property value has changed.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Infragistics.Controls.Editors.TextInputBase.SyncValuePropertiesOverride(System.Windows.DependencyProperty,System.Object,System.Exception@)">
            <summary>
            Overridden. Called to synchronize value and text properties. Derived classes can override this
            method if they have their own value properties (like the XamCheckEditor which has
            IsChecked property) because the Value, Text and all other editor specific value
            related properties need to be kept in sync. Default implementation synchronizes
            Value and Text properties.
            </summary>
            <param name="prop">Property that changed.</param>
            <param name="newValue">New value of the property.</param>
            <param name="error">Set this to the any error message if synchronization fails (for example
            because of type conversion or some other problem with syncrhonizing the new value).</param>
            <returns>Value indicating whether the new value should be considered valid. If false is
            returned, IsValueValid property will be set to false.</returns>
        </member>
        <member name="P:Infragistics.Controls.Editors.TextInputBase.DefaultValueToDisplayTextConverter">
            <summary>
            Returns the default converter used for converting between the value and the text.
            </summary>
            <para class="body">
            DefaultValueToDisplayTextConverter returns a value converter that provides the default
            logic for converting between value and display text. Derived editor classes can override
            this property to return editor specific conversion logic. If you want to provide
            custom conversion logic, use the <see cref="P:Infragistics.Controls.Editors.ValueInput.ValueToTextConverter"/>
            and <see cref="P:Infragistics.Controls.Editors.TextInputBase.ValueToDisplayTextConverter"/> properties.
            </para>
        </member>
        <member name="F:Infragistics.Controls.Editors.TextInputBase.DisplayTextPropertyKey">
            <summary>
            DisplayText property key.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.TextInputBase.DisplayTextProperty">
            <summary>
            Identifies the Read-Only <see cref="P:Infragistics.Controls.Editors.TextInputBase.DisplayText"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.TextInputBase.DisplayText">
            <summary>
            Returns the display text. Note that display text is only used when the editor is not in edit mode.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.TextInputBase.NullTextProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.TextInputBase.NullText"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.TextInputBase.NullText">
            <summary>
            The text to display when the value of the editor is null and the editor is not in edit mode.
            The default value is empty string.
            </summary>
            <remarks>
            <para class="body">
            Note that the <b>NullText</b> does not specify whether the user is allowed to enter null values
            into the editor. For that, use the <see cref="P:Infragistics.Controls.Editors.ValueInput.IsNullable"/> property.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.TextInputBase.ShouldSerializeNullText">
            <summary>
            Returns true if the NullText property is set to a non-default value.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.TextInputBase.ResetNullText">
            <summary>
            Resets the NullText property to its default state.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.TextInputBase.ValueToDisplayTextConverterProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.TextInputBase.ValueToDisplayTextConverter"/> dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.TextInputBase.ValueToDisplayTextConverter">
            <summary>
            Specifies the converter used for converting between display text and value.
            </summary>
            <remarks>
            <para class="body">
            The conversions between the 'string' and the <b>ValueType</b> by default are done using 
            built in conversion logic. You can override the default conversion logic by setting the
            <b>ValueToDisplayTextConverter</b> and <see cref="P:Infragistics.Controls.Editors.ValueInput.ValueToTextConverter"/>. 
            <b>ValueToTextConverter</b> is used when the editor is in edit mode where as 
            <b>ValueToDisplayTextConverter</b> is used when the editor is not in edit mode.
            </para>
            <para class="body">
            Note: An editor can edit values of types other than 'string'. For example, a <i>XamTextEditor</i> 
            can edit values of types <i>DateTime</i>. You can specify the type of values being edited 
            by the editor using the <see cref="T:System.ValueType"/> property.
            </para>
            <para class="body">
            For most situations the default conversion logic along with the <see cref="P:Infragistics.Controls.Editors.ValueInput.FormatProvider"/>
            and <see cref="P:Infragistics.Controls.Editors.ValueInput.Format"/> format properties should be sufficient in providing various
            formatting capabilities.
            </para>
            <para class="body">
            Although the built-in default conversion logic should be sufficient for
            most situations, you may want make use of this functionality to provide
            custom logic for converting value into display text. Examples where this
            would be needed are if you want to present a value like tomorrow and
            yesterday's dates as date as words 'Tomorrow' and 'Yesterday' respectively,
            or apply any kind of custom formatting that could not be specified using
            <see cref="P:Infragistics.Controls.Editors.ValueInput.FormatProvider"/> and <see
            cref="P:Infragistics.Controls.Editors.ValueInput.Format"/> property settings.
            </para>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.ValueToTextConverter"/>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.FormatProvider"/>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.Format"/>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.ValueType"/>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.Value"/>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.Text"/>
            <seealso cref="P:Infragistics.Controls.Editors.TextInputBase.DisplayText"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.TextInputBase.ConvertDisplayTextToValue(System.String,System.Object@,System.Exception@)">
            <summary>
            Converts the specified display text to the value type using the <see cref="P:Infragistics.Controls.Editors.TextInputBase.ValueToDisplayTextConverterResolved"/>.
            </summary>
            <param name="displayText">The display text to convert.</param>
            <param name="value">This out parameter will be set to the converted value.</param>
            <param name="error">If conversion fails, error is set to a value that indicates the error.</param>
            <returns>True if conversion succeeds, False otherwise.</returns>
            <remarks>
            <p class="body">
            ConvertDisplayTextToValue is used to convert display text into an object of type specified by 
            <see cref="P:Infragistics.Controls.Editors.ValueInput.ValueType"/> property. This method is typically not used by the editor
            itself, however other controls utilizing the editor can call this method to convert display text
            into the value that gets returned from the <see cref="P:Infragistics.Controls.Editors.ValueInput.Value"/> property. Value 
            property returns objects of type specified by ValueType property.
            </p>
            <p class="body">
            <b>NOTE:</b> This method will only succeed if <see cref="P:Infragistics.Controls.Editors.TextInputBase.ValueToDisplayTextConverter"/> has been
            specified to a converter that can successfully parse the display text into the value. If 
            <i>ValueToDisplayTextConverter</i> has not been specified, then the framework parsing methods
            will be used in which case the success of this method depends on whether these methods can correctly
            parse the display text.
            </p>
            <p class="body">
            As an example of parsing display text, if the ValueType property of a <see cref="T:Infragistics.Controls.Editors.XamMaskedInput"/> is set 
            to DateTime type, and the display text parameter is specified as "01/01/07", this method will return 
            the DateTime object that represents that date. Conversion will be done based on the editor's
            FormatProvider property and if its not specified then the current language or culture setting.
            </p>
            <p class="body">
            <b>Note:</b> Typically there is no need for you to call this method directly. This method is meant
            to be used to perform necessary conversions between display text and value by external controls like 
            the data presenter, which for example uses this to convert texts being pasted into cells into cell
            values.
            </p>
            <p class="body">
            <b>Note:</b> If you want to override the default conversion logic for converting between text 
            and value, set the <see cref="P:Infragistics.Controls.Editors.ValueInput.ValueToTextConverter"/> and 
            <see cref="P:Infragistics.Controls.Editors.TextInputBase.ValueToDisplayTextConverter"/> properties.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.TextInputBase.ConvertValueToDisplayText(System.Object,System.String@,System.Exception@)">
            <summary>
            Converts the specified value to display text using the <b>ValueToDisplayTextConverterResolved</b>.
            Returns true if the conversion succeeds. This method is used to display the value of the editor
            when the editor is not in edit mode.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="text">This will be set to the converted text.</param>
            <param name="error">If conversion fails, error is set to a value that indicates the error.</param>
            <returns>True if success, false otherwise.</returns>
            <remarks>
            <p class="body">
            See remarks section of <see cref="M:Infragistics.Controls.Editors.ValueInput.ConvertValueToText(System.Object,System.String@,System.Exception@)"/> method for more information.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Editors.TextInputBase.ValueToDisplayTextConverterResolved">
            <summary>
            Resolved converter used for converting editor value to editor display text.
            </summary>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.ValueToTextConverter"/>
            <seealso cref="P:Infragistics.Controls.Editors.TextInputBase.ValueToDisplayTextConverter"/>
        </member>
        <member name="M:Infragistics.Controls.Editors.TextInputBase.MouseLeftButtonDown_ToggleDropDownHelper(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            This is called to drop down the drop-down when the editor is entered into edit mode
            as a result of a mouse click. When the editor enters edit mode, its template cannot
            toggle the drop down because the template is switched from edit to render template.
            This interferes with framework mouse processing and prevents the drop-down buttons to
            from receiving clicks. Therefore we have to do it manually. This method is for that.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Controls.Editors.TextInputBase.SyncDisplayText">
            <summary>
            Synchronizes the DisplayText property with the value.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.TextInputBase.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Overridden. Called when the left mouse button is pressed.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="T:Infragistics.Controls.Editors.ValueConstraintFlags">
            <summary>
            Used for specifying which constraints should be applied to the input value of the 
            <see cref="M:Infragistics.Controls.Editors.ValueConstraint.Validate(System.Object,System.Type,Infragistics.Controls.Editors.ValueConstraintFlags)"/> method.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValueConstraintFlags.Enumeration">
            <summary>
            Specifies that the <see cref="P:Infragistics.Controls.Editors.ValueConstraint.Enumeration"/> constraint should be applied during validation.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValueConstraintFlags.FixedValue">
            <summary>
            Specifies that the <see cref="P:Infragistics.Controls.Editors.ValueConstraint.FixedValue"/> constraint should be applied during validation.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValueConstraintFlags.ImplicitValueAsTypeConstraints">
            <summary>
            Specifies that the implicit constraints imposed by the pseudo-datatype supplied by the 
            <see cref="P:Infragistics.Controls.Editors.ValueConstraint.ValidateAsType"/> property should be enforced during validation.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValueConstraintFlags.ImplicitTypeParameterConstraints">
            <summary>
            Specifies that the implicit constraints imposed by the Type argument to the 
            <see cref="M:Infragistics.Controls.Editors.ValueConstraint.Validate(System.Object,System.Type,Infragistics.Controls.Editors.ValueConstraintFlags)"/>
            method should be enforced during validation.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValueConstraintFlags.MaxExclusive">
            <summary>
            Specifies that the <see cref="P:Infragistics.Controls.Editors.ValueConstraint.MaxExclusive"/> constraint should be applied during validation.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValueConstraintFlags.MaxInclusive">
            <summary>
            Specifies that the <see cref="P:Infragistics.Controls.Editors.ValueConstraint.MaxInclusive"/> constraint should be applied during validation.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValueConstraintFlags.MaxLength">
            <summary>
            Specifies that the <see cref="P:Infragistics.Controls.Editors.ValueConstraint.MaxLength"/> constraint should be applied during validation.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValueConstraintFlags.MinExclusive">
            <summary>
            Specifies that the <see cref="P:Infragistics.Controls.Editors.ValueConstraint.MinExclusive"/> constraint should be applied during validation.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValueConstraintFlags.MinInclusive">
            <summary>
            Specifies that the <see cref="P:Infragistics.Controls.Editors.ValueConstraint.MinInclusive"/> constraint should be applied during validation.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValueConstraintFlags.MinLength">
            <summary>
            Specifies that the <see cref="P:Infragistics.Controls.Editors.ValueConstraint.MinLength"/> constraint should be applied during validation.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValueConstraintFlags.Nullable">
            <summary>
            Specifies that the <see cref="P:Infragistics.Controls.Editors.ValueConstraint.Nullable"/> constraint should be applied during validation.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValueConstraintFlags.RegexPattern">
            <summary>
            Specifies that the <see cref="P:Infragistics.Controls.Editors.ValueConstraint.RegexPattern"/> constraint should be applied during validation.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValueConstraintFlags.All">
            <summary>
            Specifies that all constraints, both implicit and explicit, should be applied during validation.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Editors.ValidateAsType">
            <summary>
            Used to specify how the <see cref="T:Infragistics.Controls.Editors.ValueConstraint"/> class should validate a value.  Each of these
            values represents a data type which has implicit constraints, such as a minimal value, etc.  Those
            constraints are used by the <see cref="M:Infragistics.Controls.Editors.ValueConstraint.Validate(System.Object,System.Type)"/> method to enforce data validity.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValidateAsType.Unknown">
            <summary>
            Represents an unrecognized or unspecified type.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValidateAsType.Boolean">
            <summary>
            Represents a value which can either be true or false.  Corresponds to System.Boolean.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValidateAsType.Byte">
            <summary>
            Represents a signed byte.  Corresponds to System.SByte.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValidateAsType.DateTime">
            <summary>
            Represents a date and time.  Corresponds to System.DateTime.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValidateAsType.Decimal">
            <summary>
            Represents a high precision floating point value.  Corresponds to System.Decimal.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValidateAsType.Double">
            <summary>
            Represents a high magnitude floating point value.  Corresponds to System.Double.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValidateAsType.Float">
            <summary>
            Represents a floating point value.  Corresponds to System.Single.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValidateAsType.Integer16">
            <summary>
            Represents a signed 16 bit integral value.  Corresponds to System.Int16.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValidateAsType.Integer32">
            <summary>
            Represents a signed 32 bit integral value.  Corresponds to System.Int32.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValidateAsType.Integer64">
            <summary>
            Represents a signed 64 bit integral value.  Corresponds to System.Int64.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValidateAsType.NegativeInteger64">
            <summary>
            Represents a signed 64 bit integral number whose maximal value is -1, inclusive.  Corresponds to System.Int64.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValidateAsType.NonNegativeInteger64">
            <summary>
            Represents a signed 64 bit integral number whose minimal value is 0, inclusive.  Corresponds to System.Int64.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValidateAsType.NonPositiveInteger64">
            <summary>
            Represents a signed 64 bit integral number whose maximal value is 0, inclusive.  Corresponds to System.Int64.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValidateAsType.PositiveInteger64">
            <summary>
            Represents a signed 64 bit integral number whose minimal value is -1, inclusive.  Corresponds to System.Int64.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValidateAsType.Text">
            <summary>
            Represents textual data.  Corresponds to System.String.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValidateAsType.TimeSpan">
            <summary>
            Represents a length of time.  Corresponds to System.TimeSpan.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValidateAsType.UnsignedByte">
            <summary>
            Represents an unsigned byte value.  Corresponds to System.Byte.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValidateAsType.UnsignedInteger16">
            <summary>
            Represents an unsigned 16 bit number.  Corresponds to System.UInt16.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValidateAsType.UnsignedInteger32">
            <summary>
            Represents an unsigned 32 bit number.  Corresponds to System.UInt32.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValidateAsType.UnsignedInteger64">
            <summary>
            Represents an unsigned 64 bit number.  Corresponds to System.UInt64.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValidateAsType.Uri">
            <summary>
            Represents a Uniform Resource Identifier.  Corresponds to System.Uri.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Editors.ValueConstraint">
            <summary>
            Contains various constraints that can be applied to a data value.
            </summary>
            <remarks>
            <para class="body">
            ValueConstraint object contains various properties that you can set to create constraints
            for data values. The ValueConstraint will check to see if a data value matches all the
            constraints.
            </para>
            <para class="body">
            <see cref="T:Infragistics.Controls.Editors.ValueInput"/> class exposes <see cref="P:Infragistics.Controls.Editors.ValueInput.ValueConstraint"/> property 
            that is of this object type. ValueInput's ValueConstraint property can be
            used to constraint what values the user can input in the editors. See <see cref="P:Infragistics.Controls.Editors.ValueInput.ValueConstraint"/>
            for more information.
            </para>
            <para class="body">
            You can use the ValueConstraint directly to validate a value by calling its
            <see cref="M:Infragistics.Controls.Editors.ValueConstraint.Validate(System.Object,System.Type)"/> or one of the other overloads.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueConstraint.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Infragistics.Controls.Editors.ValueConstraint"/> class without any constraints.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueConstraint.CreateInstanceCore">
            <summary>
            Creates a new instance of ValueConstraint.
            </summary>
            <returns>returns the new instance.</returns>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValueConstraint.EnumerationProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.ValueConstraint.Enumeration"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ValueConstraint.Enumeration">
            <summary>
            Gets/sets an object implementing <see cref="T:System.Collections.IEnumerable"/> which contains a list of value options.
            Note, this property defaults to a null (Nothing) value.
            </summary>
            <remarks>
            <para class="body">
            Enumeration constraints data value to be one of the elements that are part of the enumeration.
            In other words the value being validated by this ValueConstraint object will not be considered
            valid if the value is not part of this enumeration.
            </para>
            <para class="note">
            <b>Note:</b> The Enumeration is IEnumerable interface type. Therefore it can be set to any object
            that implements this interface, including Array, ArrayList etc...
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueConstraint.ShouldSerializeEnumeration">
            <summary>
            Returns true if the Enumeration property is set to a non-default value.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueConstraint.ResetEnumeration">
            <summary>
            Resets the Enumeration property to its default state.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ValueConstraint.HasEnumeration">
            <summary>
            Returns true if the <see cref="P:Infragistics.Controls.Editors.ValueConstraint.Enumeration"/> list is not null.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValueConstraint.FixedValueProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.ValueConstraint.FixedValue"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ValueConstraint.FixedValue">
            <summary>
            Gets/sets the value which the constrained value must be equal to.
            </summary>
            <remarks>
            <para class="body">
            If FixedValue is set then the data value being validated must be equal to this property's value.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueConstraint.ShouldSerializeFixedValue">
            <summary>
            Returns true if the FixedValue property is set to a non-default value.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueConstraint.ResetFixedValue">
            <summary>
            Resets the FixedValue property to its default state.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ValueConstraint.HasFixedValue">
            <summary>
            Returns true if the <see cref="P:Infragistics.Controls.Editors.ValueConstraint.FixedValue"/> property is not null (Nothing).
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValueConstraint.MaxExclusiveProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.ValueConstraint.MaxExclusive"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ValueConstraint.MaxExclusive">
            <summary>
            Gets/sets the value that will constraint the data value to be less than it.
            </summary>
            <remarks>
            <para class="body">
            The data value being validated must be less than the MaxExclusive. It can not be the same as
            MaxExclusive.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueConstraint.ShouldSerializeMaxExclusive">
            <summary>
            Returns true if the MaxExclusive property is set to a non-default value.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueConstraint.ResetMaxExclusive">
            <summary>
            Resets the MaxExclusive property to its default state.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ValueConstraint.HasMaxExclusive">
            <summary>
            Returns true if the <see cref="P:Infragistics.Controls.Editors.ValueConstraint.MaxExclusive"/> property is not null (Nothing).
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValueConstraint.MaxInclusiveProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.ValueConstraint.MaxInclusive"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ValueConstraint.MaxInclusive">
            <summary>
            Gets/sets the maximum value which the constrained value is allowed to be.
            </summary>
            <remarks>
            <para class="body">
            The data value being validated must be less than or equal to the MaxInclusive.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueConstraint.ShouldSerializeMaxInclusive">
            <summary>
            Returns true if the MaxInclusive property is set to a non-default value.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueConstraint.ResetMaxInclusive">
            <summary>
            Resets the MaxInclusive property to its default state.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ValueConstraint.HasMaxInclusive">
            <summary>
            Returns true if the <see cref="P:Infragistics.Controls.Editors.ValueConstraint.MaxInclusive"/> property is not null (Nothing).
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValueConstraint.MaxLengthProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.ValueConstraint.MaxLength"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ValueConstraint.MaxLength">
            <summary>
            Gets/sets the maximum length (inclusive) allowed for the constrained value.
            This constraint applies to values of type 'string'.
            The default value is 0, which means that there is no limit.
            </summary>
            <remarks>
            <para class="body">
            MaxLength constraint will ensure that the data value being validated has
            a length that's less than or equal the value of this property.
            </para>
            <para class="body">
            <b>Note:</b> If the data value being validated is not a string object then it
            will be converted to string before performing this validation.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueConstraint.ShouldSerializeMaxLength">
            <summary>
            Returns true if the MaxLength property is set to a non-default value.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueConstraint.ResetMaxLength">
            <summary>
            Resets the MaxLength property to its default state.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ValueConstraint.HasMaxLength">
            <summary>
            Returns true if the <see cref="P:Infragistics.Controls.Editors.ValueConstraint.MaxLength"/> property has a value greater than 0.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValueConstraint.MinExclusiveProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.ValueConstraint.MinExclusive"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ValueConstraint.MinExclusive">
            <summary>
            Gets/sets the value that will constraint the data value to be greater than it.
            </summary>
            <remarks>
            <para class="body">
            The data value being validated must be greater than the MinExclusive. It can not be the same as
            MinExclusive.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueConstraint.ShouldSerializeMinExclusive">
            <summary>
            Returns true if the MinExclusive property is set to a non-default value.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueConstraint.ResetMinExclusive">
            <summary>
            Resets the MinExclusive property to its default state.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ValueConstraint.HasMinExclusive">
            <summary>
            Returns true if the <see cref="P:Infragistics.Controls.Editors.ValueConstraint.MinExclusive"/> property is not null (Nothing).
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValueConstraint.MinInclusiveProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.ValueConstraint.MinInclusive"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ValueConstraint.MinInclusive">
            <summary>
            Gets/sets the minimum value which the constrained value is allowed to be.
            </summary>
            <remarks>
            <para class="body">
            The data value being validated must be greater than or equal to the MinInclusive.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueConstraint.ShouldSerializeMinInclusive">
            <summary>
            Returns true if the MinInclusive property is set to a non-default value.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueConstraint.ResetMinInclusive">
            <summary>
            Resets the MinInclusive property to its default state.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ValueConstraint.HasMinInclusive">
            <summary>
            Returns true if the <see cref="P:Infragistics.Controls.Editors.ValueConstraint.MinInclusive"/> property is not null (Nothing).
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValueConstraint.MinLengthProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.ValueConstraint.MinLength"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ValueConstraint.MinLength">
            <summary>
            Gets/sets the minimum length (inclusive) allowed for the constrained value.
            This constraint applies to values of type 'string'.
            The default value is 0, which means there is no minimum length constraint.
            </summary>
            <remarks>
            <para class="body">
            MinLength constraint will ensure that the data value being validated has
            a length that's greater than or equal the value of this property.
            </para>
            <para class="body">
            <b>Note:</b> If the data value being validated is not a string object then it
            will be converted to string before performing this validation.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueConstraint.ShouldSerializeMinLength">
            <summary>
            Returns true if the MinLength property is set to a non-default value.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueConstraint.ResetMinLength">
            <summary>
            Resets the MinLength property to its default state.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ValueConstraint.HasMinLength">
            <summary>
            Returns true if the <see cref="P:Infragistics.Controls.Editors.ValueConstraint.MinLength"/> property has a value greater than 0.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValueConstraint.NullableProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.ValueConstraint.Nullable"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ValueConstraint.Nullable">
            <summary>
            Gets/sets a flag which indicates if the constrained value is allowed to be null (Nothing).
            Default value of this property is null which is to allow null values.
            </summary>
            <remarks>
            <para class="body">
            Nullable property if set to False constraints the value to be non-null. The value must not
            be one of null (Nothing in VB) or DBNull.
            </para>
            <para class="body">
            If the ValueConstraint object is associated with an editor's <see cref="P:Infragistics.Controls.Editors.ValueInput.ValueConstraint"/>
            property, <b>Nullable</b> indicates if the user is allowed to delete all the contents of the editor.
            If Nullable is set to False then the user is not allowed to delete all the contents. The user must
            enter a value in the editor.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueConstraint.ShouldSerializeNullable">
            <summary>
            Returns true if the Nullable property is set to a non-default value.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueConstraint.ResetNullable">
            <summary>
            Resets the Nullable property to its default state.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ValueConstraint.HasNullable">
            <summary>
            Returns true if the <see cref="P:Infragistics.Controls.Editors.ValueConstraint.Nullable"/> property returns a non-default value.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValueConstraint.RegexPatternProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.ValueConstraint.RegexPattern"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ValueConstraint.RegexPattern">
            <summary>
            Gets/sets the regular expression to which the constrained value must adhere.
            </summary>
            <remarks>
            <para class="body">
            RegexPattern validates the data value against a regular expression pattern. The value
            must match this patter for it be considered valid.
            </para>
            <para class="body">
            Here are some examples of regular expressions:<br/>
            <ul>
            <li><b>\d*</b> - the text must be zero or more digits</li>
            <li><b>\d+</b> - the text must be one or more digits</li>
            <li><b>[a-d]+</b> - the text must be one or more instances of a, b, c, d characters</li>
            <li><b>\d{3}-?\d{3}-?\d{4}</b> - U.S. phone number pattern where '-' are optional</li>
            </ul>
            </para>
            <para class="body">
            See .NET <see cref="T:System.Text.RegularExpressions.Regex"/> class for more information
            on the syntax of regular expressions. The Regex class is used to perform the matching.
            </para>
            <para class="body">
            <b>Note:</b> If the data value being validated is not a string object then it
            will be converted to string before performing this validation.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueConstraint.ShouldSerializeRegexPattern">
            <summary>
            Returns true if the RegexPattern property is set to a non-default value.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueConstraint.ResetRegexPattern">
            <summary>
            Resets the RegexPattern property to its default state.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ValueConstraint.HasRegexPattern">
            <summary>
            Returns true if the <see cref="P:Infragistics.Controls.Editors.ValueConstraint.RegexPattern"/> is not null (Nothing).
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValueConstraint.ValidateAsTypeProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.ValueConstraint.ValidateAsType"/> dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ValueConstraint.ValidateAsType">
            <summary>
            Gets/sets the <see cref="P:Infragistics.Controls.Editors.ValueConstraint.ValidateAsType"/> value which the <see cref="M:Infragistics.Controls.Editors.ValueConstraint.Validate(System.Object,System.Type)"/> method should
            use to constrain the input value.  By default this value is set to <b>Unknown</b>.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueConstraint.ShouldSerializeValidateAsType">
            <summary>
            Returns true if the ValidateAsType property is set to a non-default value.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueConstraint.ResetValidateAsType">
            <summary>
            Resets the ValidateAsType property to its default state.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueConstraint.GetTypeFromValidateAsType(Infragistics.Controls.Editors.ValidateAsType)">
            <summary>
            Returns the System.Type object which corresponds to the <see cref="P:Infragistics.Controls.Editors.ValueConstraint.ValidateAsType"/> argument.
            </summary>
            <param name="validateAsType">The psuedo-data type for which the corresponding CLR Type is needed.</param>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueConstraint.GetValidateAsTypeFromType(System.Type)">
            <summary>
            Returns a <see cref="P:Infragistics.Controls.Editors.ValueConstraint.ValidateAsType"/> value which represents the <see cref="T:System.Type"/> argument.
            </summary>
            <param name="type">A Type object for which the corresponding ValidateAsType is needed.</param>
        </member>
        <member name="P:Infragistics.Controls.Editors.ValueConstraint.HasAnyConstraints">
            <summary>
            Returns true if any of the constraint properties are set on this object or if the ValidateAsType
            property is set to something other than 'Unknown'.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueConstraint.InitializeFrom(Infragistics.Controls.Editors.ValueConstraint,System.Boolean)">
            <summary>
            Copies the state of the argument into this object.
            </summary>
            <param name="source">The ValueConstraint to copy the state of.</param>
            <param name="copyEnumeration">Pass false if the 'enumeration' field should not be copied.</param>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueConstraint.InitializeFrom(Infragistics.Controls.Editors.ValueConstraint)">
            <summary>
            Copies the state of the argument into this object.
            </summary>
            <param name="source">The ValueConstraint to copy the state of.</param>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueConstraint.Merge(Infragistics.Controls.Editors.ValueConstraint,Infragistics.Controls.Editors.ValueConstraintFlags)">
            <summary>
            Copies constraint settings from the source ValueConstraint to the target (i.e. the instance on which this method was invoked).
            Only constraint settings which have default values on the target will be assigned values from the source.
            Only constraint settings specified by the 'constraintFlags' flags argument will be copied.
            Note, this method does not copy the ValidateAsType property.
            </summary>
            <param name="source">A ValueConstraint object which contains constraint settings to be copied.</param>
            <param name="constraintFlags">A bit flag which specifies the constraint settings to be copied.</param>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueConstraint.Merge(Infragistics.Controls.Editors.ValueConstraint)">
            <summary>
            Copies constraint settings from the source ValueConstraint to the target (i.e. the instance on which this method was invoked).
            Only constraint settings which have default values on the target will be assigned values from the source.
            Note, this method does not copy the ValidateAsType property.
            </summary>
            <param name="source">A ValueConstraint object which contains constraint settings to be copied.</param>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueConstraint.Reset(Infragistics.Controls.Editors.ValueConstraintFlags)">
            <summary>
            Resets all of the constraint settings in this object to their initial (not set) state
            which are specified in the 'constraintFlags' bit flag argument.
            Note, this method does not reset the ValidateAsType property.
            </summary>
            <param name="constraintFlags">A bit flag which specifies which constraint settings to reset.</param>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueConstraint.Reset">
            <summary>
            Resets all of the constraint settings in this object to their initial (not set) state.
            Note, this method does not reset the ValidateAsType property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueConstraint.Validate(System.Object,System.Type,Infragistics.Controls.Editors.ValueConstraintFlags,System.IFormatProvider,System.String,System.String@)">
            <summary>
            Returns true if the argument is considered valid with regards to the current constraint settings.
            </summary>
            <param name="dataValue">
            The data value to validate.
            </param>
            <param name="targetType">
            A Type object representing the data type which the 'dataValue' should be validated as.
            </param>
            <param name="constraintFlags">
            A bit flag which indicates which constraints to apply during validation.
            </param>
            <param name="formatProvider">
            An IFormatProvider used when converting values to and from strings.
            </param>
            <param name="format">
            A format string to use when converting values to and from strings.
            </param>
            <param name="errorMessage">
            If the data value is invalid, this out param will reference an error message.
            </param>
            <returns>Returns true if the input value satisfies all of the applicable constraints set on this object, else false.</returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueConstraint.Validate(System.Object,System.Type,Infragistics.Controls.Editors.ValueConstraintFlags)">
            <summary>
            Returns true if the argument is considered valid with regards to the current constraint settings.
            </summary>
            <param name="dataValue">
            The data value to validate.
            </param>
            <param name="targetType">
            A Type object representing the data type which the 'dataValue' should be validated as. 
            </param>
            <param name="constraintFlags">
            A bit flag which indicates which constraints to apply during validation.
            </param>
            <returns>Returns true if the input value satisfies all of the applicable constraints set on this object, else false.</returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueConstraint.Validate(System.Object,System.Type)">
            <summary>
            Returns true if the argument is considered valid with regards to the current constraint settings.
            This overload uses <see cref="T:Infragistics.Controls.Editors.ValueConstraintFlags"/> <b>All</b>.
            </summary>
            <param name="dataValue">
            The data value to validate.
            </param>
            <param name="targetType">
            A Type object representing the data type which the 'dataValue' should be validated as. 
            </param>
            <returns>Returns true if the input value satisfies all of the applicable constraints set on this object, else false.</returns>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValueConstraint.FractionDigitsProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.ValueConstraint.FractionDigits"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ValueConstraint.FractionDigits">
            <summary>
            Currently this is not being used.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueConstraint.ShouldSerializeFractionDigits">
            <summary>
            Returns true if the FractionDigits property is set to a non-default value.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueConstraint.ResetFractionDigits">
            <summary>
            Resets the FractionDigits property to its default state.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValueConstraint.TotalDigitsProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.ValueConstraint.TotalDigits"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ValueConstraint.TotalDigits">
            <summary>
            Currently this is not being used.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueConstraint.ShouldSerializeTotalDigits">
            <summary>
            Returns true if the TotalDigits property is set to a non-default value.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueConstraint.ResetTotalDigits">
            <summary>
            Resets the TotalDigits property to its default state.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Editors.ValueConstraint.PropertyChanged">
            <summary>
            Raised whenever a property's value changes.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Editors.ValidationErrorInfo">
            <summary>
            Contains error information regarding why a value is invalid.
            </summary>
            <remarks>
            <para class="body">
            When an editor value is invalid, editor's <see cref="P:Infragistics.Controls.Editors.ValueInput.IsValueValid"/> property returns
            false. To get the error information regarding why the value is invalid, use the editor's
            <see cref="P:Infragistics.Controls.Editors.ValueInput.InvalidValueErrorInfo"/> property which returns an instance of this class.
            </para>
            </remarks>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.InvalidValueErrorInfo"/>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.IsValueValid"/>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValidationErrorInfo.#ctor(System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="exception">Exception if any.</param>
        </member>
        <member name="P:Infragistics.Controls.Editors.ValidationErrorInfo.ErrorMessage">
            <summary>
            Error message indicating why the value is invalid.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ValidationErrorInfo.Exception">
            <summary>
            Returns the exception if any that caused validation error.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Editors.ValueInput">
            <summary>
            An abstract base class that provides functionality for displaying or edit values. 
            </summary>
            <remarks>
            <p class="body">The <b>ValueInput</b> exposes <see cref="P:Infragistics.Controls.Editors.ValueInput.Value"/> and <see cref="P:Infragistics.Controls.Editors.ValueInput.Text"/> properties that return 
            the current value and the text representation of that value respectively. The <see cref="P:Infragistics.Controls.Editors.ValueInput.ValueToTextConverter"/> is 
            used to convert between the <b>Value</b> and <b>Text</b>.</p>
            <p class="body">The <b>ValueInput</b> supports being put into edit mode. When in edit mode, the <see cref="P:Infragistics.Controls.Editors.ValueInput.Value"/> of the control 
            can be changed by the end user. The <see cref="P:Infragistics.Controls.Editors.ValueInput.ValueConstraint"/> can be set to a <see cref="T:Infragistics.Controls.Editors.ValueConstraint"/> 
            instance to provide constraints such as minimum and maximum values that can be used to limit what is considered a valid value for the 
            control. The ValueConstraint's <see cref="P:Infragistics.Controls.Editors.ValueConstraint.Nullable"/> property can be used to specify if the control will accept a null entry. The <see cref="P:Infragistics.Controls.Editors.ValueInput.InvalidValueBehavior"/> 
            property determines how the control should behave when it is exiting edit mode and the current value is not valid.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInput.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Controls.Editors.ValueInput"/>
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInput.OnApplyTemplate">
            <summary>
            Called when the template is applied.
            </summary>
            <remarks>
            <p class="body">
            OnApplyTemplate is a .NET framework method exposed by the FrameworkElement. This class overrides
            it to get the focus site from the control template whenever template gets applied to the control.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInput.OnCreateAutomationPeer">
            <summary>
            Returns an automation peer that exposes the <see cref="T:Infragistics.Controls.Editors.ValueInput"/> to UI Automation.
            </summary>
            <returns>A <see cref="T:Infragistics.AutomationPeers.ValueInputAutomationPeer"/></returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInput.OnInitialized(System.EventArgs)">
            <summary>
            Overridden.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInput.OnGotFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Overridden. Called when the control receives focus.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInput.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the keyboard focus shifts into or out of the visual tree of this element.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInput.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Invoked when the mouse is moved within the bounds of the element.
            </summary>
            <param name="e">Provides information about the mouse position.</param>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInput.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Invoked when the mouse is moved outside the bounds of the element.
            </summary>
            <param name="e">Provides information about the mouse position.</param>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInput.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when the left mouse button is pressed.
            </summary>
            <param name="e">The event arguments</param>
            <remarks>
            <p class="body">
            ValueInput overrides this method to give focus to the editor and enter edit mode
            if necessary in response to left mouse button down.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInput.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when a property value has changed
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:Infragistics.Controls.Editors.ValueInput.ValidationError">
            <summary>
            Occurs when the user attempts to leave the editor with an invalid value.
            </summary>
            <remarks>
            <para class="body">
            The editor validates the user input when the user attempts to leave the control
            after modifying the value of the editor. EditModeValidationError event is raised 
            if the modified value is invalid. The editor considers a value invalid if the entered
            text can not be parsed into <see cref="P:Infragistics.Controls.Editors.ValueInput.ValueType"/> or it does not satisfy all the
            constraints specified by the <see cref="P:Infragistics.Controls.Editors.ValueInput.ValueConstraint"/>. 
            </para>
            <para class="body">
            See <see cref="P:Infragistics.Controls.Editors.ValueInput.InvalidValueBehavior"/> and <see cref="P:Infragistics.Controls.Editors.ValueInput.IsValueValid"/> for more information.
            </para>
            </remarks>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.ValueConstraint"/>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.IsValueValid"/>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.InvalidValueBehavior"/>
            <seealso cref="T:Infragistics.Controls.Editors.EditModeValidationErrorEventArgs"/>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInput.RaiseValidationError(Infragistics.Controls.Editors.EditModeValidationErrorEventArgs)">
            <summary>
            Raises <see cref="E:Infragistics.Controls.Editors.ValueInput.ValidationError"/> event.
            </summary>
            <param name="args">Event arguments.</param>
        </member>
        <member name="P:Infragistics.Controls.Editors.ValueInput.AlwaysValidateResolved">
            <summary>
            Read-only. Gets the resolved value of the <see cref="P:Infragistics.Controls.Editors.ValueInput.AlwaysValidate"/> property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ValueInput.CultureInfoResolved">
            <summary>
            Returns the culture info resolved from format provider setting and then from the language setting.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ValueInput.FormatProviderResolved">
            <summary>
            Returns the resolved format provider.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ValueInput.InternalIsInitialized">
            <summary>
            Returns the value of _initialized flag.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ValueInput.ValueToTextConverterResolved">
            <summary>
            Resolved converter used for converting editor value to editor text.
            </summary>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.ValueToTextConverter"/>
            <seealso cref="P:Infragistics.Controls.Editors.TextInputBase.ValueToDisplayTextConverter"/>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValueInput.AlwaysValidateProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.ValueInput.AlwaysValidate"/> dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ValueInput.AlwaysValidate">
            <summary>
            Specifies whether to validate the editor's value even if the user doesn't modify the value. Default value
            is <b>False</b> where the editor only validates the value if the user modifies it.
            </summary>
            <remarks>
            <para class="body">
            By default the editor validates the value only if the user has modified it, even if the editor's value is
            invalid. If the user doesn't modify the value and tries the leave the editor with invalid value that the
            editor was initialized with, no validation takes place. You can change this behavior by setting 
            <b>AlwaysValidate</b> to true, where the editor will
            take validation action based on the <see cref="P:Infragistics.Controls.Editors.ValueInput.InvalidValueBehavior"/> property setting as long as the 
            editor's value is invalid, regardless of whether the the user has modified it or not.
            </para>
            <para class="body">
            As an example, let's say ValueConstraint on the editor had MinLength constraint set to 5. The editor is
            initialized with string value "a", which doesn't meet the MinLength of 5 constraint. The editor's 
            IsValueValid would be <i>false</i>, since the current value doesn't meet the value constraint. If the 
            user tries to leave the editor without modifying the value, by default the editor will not take any 
            validation action and prompt the user of invalid value. However if you set <i>AlwaysValidate</i> to 
            <i>true</i>, the editor will take validation action. Note that if the user modifies the value, then
            the editor will validate regardless of this property setting.
            </para>
            </remarks>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.ValueConstraint"/>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.IsValueValid"/>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.InvalidValueBehavior"/>
            <seealso cref="E:Infragistics.Controls.Editors.ValueInput.ValidationError"/>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInput.ShouldSerializeAlwaysValidate">
            <summary>
            Returns true if the AlwaysValidate property is set to a non-default value.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInput.ResetAlwaysValidate">
            <summary>
            Resets the AlwaysValidate property to its default state.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValueInput.IsInEditModeProperty">
            <summary>
            Identifies the read-only <see cref="P:Infragistics.Controls.Editors.ValueInput.IsInEditMode"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ValueInput.IsInEditMode">
            <summary>
            Returns
            </summary>
            <seealso cref="F:Infragistics.Controls.Editors.ValueInput.IsInEditModeProperty"/>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValueInput.ValueProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.ValueInput.Value"/> dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ValueInput.Value">
            <summary>
            Gets or sets the value of the editor.
            </summary>
            <remarks>
            <para class="body">
            The <see cref="P:Infragistics.Controls.Editors.ValueInput.ValueType"/> property specifies the type of values returned and expected 
            by the <b>Value</b> property. For example, if you set the <b>ValueType</b> to 
            <i>Decimal</i> then the <b>Value</b> property will return decimal values. The user input will
            be converted to Decimal before returning from Value property. The <see cref="P:Infragistics.Controls.Editors.ValueInput.Text"/> 
            property on the other hand always returns the text representation of the value.
            </para>
            <para class="note">
            <b>Note:</b> Setting the <b>Value</b> property will also update the <see cref="P:Infragistics.Controls.Editors.ValueInput.Text"/> property.
            </para>
            <para class="note">
            <b>Note:</b> As the user enters/modifies the contents of the <see cref="T:Infragistics.Controls.Editors.ValueInput"/>, the 
            <see cref="P:Infragistics.Controls.Editors.ValueInput.Text"/> and <b>Value</b> properties will be synchronously updated to reflect the current 
            contents. If the user input can not be parsed into the associated <see cref="P:Infragistics.Controls.Editors.ValueInput.ValueType"/>, the <b>Text</b> 
            property will be updated however the <b>Value</b> property will retain last parsed value. In such 
            a case, the <see cref="P:Infragistics.Controls.Editors.ValueInput.IsValueValid"/> property will return <b>false</b> indicating that the user input 
            is invalid.</para>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.ValueType"/>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.Text"/>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.ValueConstraint"/>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.IsValueValid"/>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.HasValueChanged"/>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.OriginalValue"/>
            </remarks>
        </member>
        <member name="E:Infragistics.Controls.Editors.ValueInput.ValueChanged">
            <summary>
            Occurs when Value property changes or the user modifies the contents of the editor.
            </summary>
            <remarks>
            <para class="body">
            ValueChanged event is raised when the <see cref="P:Infragistics.Controls.Editors.ValueInput.Value"/> property is changed or
            the user modifies the contents of the editor. When the user modifies the contents of 
            the editor, the Value property is updated to reflect the new content. However the
            editor may fail to update the Value property if the new contents of the editor can
            not be prased into the <see cref="P:Infragistics.Controls.Editors.ValueInput.ValueType"/>. For example if the ValueType is
            set to a numeric type like Double and the user enters a non-numeric value then the
            entered value can not be parsed into a Double. Therefore the Value property will not
            be updated. However the ValueChanged event will still be raised.
            </para>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.IsValueValid"/>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.Value"/>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.Text"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInput.OnValueChanged(System.Object,System.Object)">
            <summary>
            Called when <b>Value</b> property changes or the contents of the editor changes.
            </summary>
            <seealso cref="E:Infragistics.Controls.Editors.ValueInput.ValueChanged"/>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInput.CoerceValueHelper">
            <summary>
            Called from the <see cref="P:Infragistics.Controls.Editors.ValueInput.Value"/> property's CoerceValue handler. The default 
            implementation performs type conversions therefore you should call the base implementation
            to ensure proper type conversions are performed.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValueInput.TextProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.ValueInput.Text"/> dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ValueInput.Text">
            <summary>
            Gets or sets the value of the editor as text.
            </summary>
            <remarks>
            <para class="body">
            Setting the <b>Text</b> property will also update the <b>Value</b> property. If the
            new text can not be parsed into the value type (<see cref="P:Infragistics.Controls.Editors.ValueInput.ValueType"/>) then the
            <b>Value</b> property will not be updated.
            </para>
            <para class="body">
            <b>Note:</b> As the user enters/modifies contents, the Text and Value properties will
            be synchronously updated to reflect the current contents. If the user input can not be 
            parsed into the value type, the Text property will be updated however the Value property 
            will retain last parsed value. However in such a case <see cref="P:Infragistics.Controls.Editors.ValueInput.IsValueValid"/>
            property will return False indicating that the user input is invalid.
            </para>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.Value"/>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.ValueType"/>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.ValueConstraint"/>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.IsValueValid"/>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.HasValueChanged"/>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.OriginalValue"/>
            </remarks>
        </member>
        <member name="E:Infragistics.Controls.Editors.ValueInput.TextChanged">
            <summary>
            Occurs when property 'Text' changes
            </summary>
            <remarks>
            <para class="body">
            TextChanged event is raised when the <see cref="P:Infragistics.Controls.Editors.ValueInput.Text"/> property is changed or
            the user modifies the contents of the editor. When the user modifies the contents of 
            the editor, the Text property is updated to reflect the new content.
            </para>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.Text"/>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.Value"/>
            <seealso cref="E:Infragistics.Controls.Editors.ValueInput.ValueChanged"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInput.OnTextChanged(System.String,System.String)">
            <summary>
            Called when property 'Text' changes
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInput.OnCoerceText(System.String)">
            <summary>
            Called from the <see cref="P:Infragistics.Controls.Editors.ValueInput.Text"/> property's CoerceValue handler. The default 
            implementation does nothing.
            </summary>
            <param name="text">The text to coerce</param>
            <returns>Coerced value</returns>
            <remarks>
            <para class="body">
            The default implementation simply returns the value of <paramref name="text"/> parameter.
            The derived editors can override this method to provide editor specific coersion logic.
            </para>
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValueInput.ValueTypeProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.ValueInput.ValueType"/> dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ValueInput.ValueType">
            <summary>
            Gets or sets the type of values that this editor manipulates.
            </summary>
            <remarks>
            <para class="body">
            <b>ValueType</b> specifies the type of values that this editor manipulates. The 
            Value property will return objects of this type. Also the user input will be
            validated accordingly as well. That is when the user enters some text, the text
            will be parsed into an object of this type. If parsing fails then the input
            is considered invalid. If parsing succeeds, the <see cref="P:Infragistics.Controls.Editors.ValueInput.Value"/> property is
            updated with the parsed value. 
            </para>
            <para class="body">
            You can use the <see cref="P:Infragistics.Controls.Editors.ValueInput.IsValueValid"/> property to find out if the current 
            input is valid. For the input to be considered valid, the editor must be able to
            parse the input text into an object of <i>ValueType</i> and it must satisfy
            any constraints specified via this <see cref="P:Infragistics.Controls.Editors.ValueInput.ValueConstraint"/> property.
            </para>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.Value"/>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.Text"/>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.ValueConstraint"/>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.IsValueValid"/>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.HasValueChanged"/>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.ValueToTextConverter"/>
            <seealso cref="P:Infragistics.Controls.Editors.TextInputBase.ValueToDisplayTextConverter"/>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.ValueTypeResolved"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInput.ShouldSerializeValueType">
            <summary>
            Returns true if the ValueType property is set to a non-default value.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInput.ResetValueType">
            <summary>
            Resets the ValueType property to its default value.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValueInput.ValueTypeNameProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.ValueInput.ValueTypeName"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ValueInput.ValueTypeName">
            <summary>
            Gets or sets the name of the type of values that this editor manipulates.
            </summary>
            <remarks>
            <para class="body">This property is exposed so that the type can be specified in xaml such that the same string will result in the appropriate type being resolved in <see cref="P:Infragistics.Controls.Editors.ValueInput.ValueTypeResolved"/> in both SL and WPF. 
            In addition to being able to resolve fully qualified type names this property supports short names for the common types, e.g. 'DateTime', 'Int32', as well as their corresponding nullable types, e.g. 'DateTime?', 'Int32?', 'Double?' etc.</para>
            <para class="note"><b>Note:</b> this property is ignored if <see cref="P:Infragistics.Controls.Editors.ValueInput.ValueType"/> is specified</para>
            </remarks>
            <seealso cref="F:Infragistics.Controls.Editors.ValueInput.ValueTypeNameProperty"/>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.ValueType"/>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.ValueTypeResolved"/>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValueInput.ValueTypeResolvedProperty">
            <summary>
            Identifies the read-only <see cref="P:Infragistics.Controls.Editors.ValueInput.ValueTypeResolved"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInput.OnValueTypeResolvedChanged(System.Type)">
            <summary>
            Called when the value of <b>ValueType</b> property changes.
            </summary>
            <param name="newType"></param>
        </member>
        <member name="P:Infragistics.Controls.Editors.ValueInput.ValueTypeResolved">
            <summary>
            Gets the resolved value type.
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> the resolution order is as follows. if the <see cref="P:Infragistics.Controls.Editors.ValueInput.ValueType"/> property is set it takes precedence. Otherwise, if the <see cref="P:Infragistics.Controls.Editors.ValueInput.ValueTypeName"/> is specified an attempt is made to resolve the type. Finally the default type for the editor is used.</para>
            </remarks>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.ValueType"/>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.ValueTypeName"/>
            <seealso cref="F:Infragistics.Controls.Editors.ValueInput.ValueTypeResolvedProperty"/>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValueInput.ValueConstraintProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.ValueInput.ValueConstraint"/> dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInput.OnValueConstraintChanged(System.String)">
            <summary>
            This method is called whenever the ValueConstraint or one of its properties changes.
            </summary>
            <param name="valueConstraintPropertyName">Null if the ValueConstraint itself changed or 
            the name of the property that changed.</param>
        </member>
        <member name="P:Infragistics.Controls.Editors.ValueInput.ValueConstraint">
            <summary>
            Gets or sets the constraints for editor input. Default value is <b>null</b>.
            </summary>
            <remarks>
            <para class="body">
            <b>Note</b> that the default value of this property is <b>null</b>. You must set
            the property to an instance of <see cref="P:Infragistics.Controls.Editors.ValueInput.ValueConstraint"/> object.
            </para>
            <para class="body">
            <b>ValueConstraint</b> is used to limit what the user can input into the editor.
            More accurately, the editor will consider user input invalid if it doesn't
            satisfy one or more criteria specified by the <i>ValueConstraint</i>. The 
            <see cref="P:Infragistics.Controls.Editors.ValueInput.IsValueValid"/> property can be used to find out if editor considers
            current value valid.
            </para>
            <para class="body">
            When an invalid value is entered into the editor, there are behavioral implications
            based on various settings. For example, by default the editor doesn't exit edit mode
            when the current input is invalid. The action taken by the editor can be controlled
            using the <see cref="P:Infragistics.Controls.Editors.ValueInput.InvalidValueBehavior"/> property.
            </para>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.ValueType"/>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.Value"/>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.IsValueValid"/>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.InvalidValueBehavior"/>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.HasValueChanged"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInput.ShouldSerializeValueConstraint">
            <summary>
            Returns true if the ValueConstraint property is set to a non-default value.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInput.ResetValueConstraint">
            <summary>
            Resets the ValueConstraint property to its default value of <b>null</b>.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValueInput.InvalidValueBehaviorProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.ValueInput.InvalidValueBehavior"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ValueInput.InvalidValueBehavior">
            <summary>
            Specifies what action to take when the user attempts to leave the editor with an invalid value.
            </summary>
            <remarks>
            <para class="body">
            <b>InvalidValueBehavior</b> specifies what action to take when the user tries to leave
            the editor after entering an invalid value.
            </para>
            <para class="body">
            There are various ways a value in the editor can be considered invalid by the editor.
            If the entered text can not be parsed into an object of type specified by 
            <see cref="P:Infragistics.Controls.Editors.ValueInput.ValueType"/> property, then the value is considered invalid. For
            example, if the ValueType is set to <i>Int32</i> or any other numeric type and the user 
            enteres a non-numeric text then the text can not be parsed into the value type. As a result
            the editor will consider the input invalid.
            </para>
            <para class="body">
            Another way the value can be considered invalid is if the entered value can not satisfy
            constraints specified by <see cref="P:Infragistics.Controls.Editors.ValueInput.ValueConstraint"/> object. For example, if
            <see cref="P:Infragistics.Controls.Editors.ValueConstraint.MinInclusive"/> is specified as 10 and the value entered is 8
            then the value does not satisfy the constraints and thus will be considred invalid.
            </para>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.ValueType"/>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.ValueConstraint"/>
            <seealso cref="P:Infragistics.Controls.Editors.ValueConstraint.Nullable"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInput.ShouldSerializeInvalidValueBehavior">
            <summary>
            Returns true if the InvalidValueBehavior property is set to a non-default value.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInput.ResetInvalidValueBehavior">
            <summary>
            Resets the InvalidValueBehavior property to its default state.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValueInput.ValueToTextConverterProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.ValueInput.ValueToTextConverter"/> dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ValueInput.ValueToTextConverter">
            <summary>
            Specifies the converter used for converting between text and value.
            </summary>
            <remarks>
            <para class="body">
            The conversions between the 'string' and the <b>ValueType</b> by default are done using 
            built in conversion logic. You can override the conversion logic by setting the
            <b>ValueToDisplayTextConverter</b> and <see cref="P:Infragistics.Controls.Editors.ValueInput.ValueToTextConverter"/>. 
            <b>ValueToTextConverter</b> is used when the editor is in edit mode where as 
            <b>ValueToDisplayTextConverter</b> is used when the editor is not in edit mode.
            </para>
            <para class="body">
            Note: An editor can edit values of types other than 'string'. For example, a <i>XamTextEditor</i> 
            can edit values of types <i>DateTime</i>. You can specify the type of values being edited 
            by the editor using the <see cref="P:Infragistics.Controls.Editors.ValueInput.ValueType"/> property.
            </para>
            <para class="body">
            Although the built-in default conversion logic should be sufficient for
            most situations, you may want make use of this functionality to provide
            custom logic for converting user input into value type object. Examples
            where this would be needed are if you are editing custom objects where the
            built-in conversion logic would not know how to convert text into custom
            object type. Or you want to support entering certain symbols in the text
            that signify certain aspect of the value - for example you want 'k' in '2k'
            to be interpreted as 1000 magnitude, or +1d to be interpreted as tomorrow's
            date when editing DateTime.
            </para>
            <seealso cref="P:Infragistics.Controls.Editors.TextInputBase.ValueToDisplayTextConverter"/>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.FormatProvider"/>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.Format"/>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.ValueType"/>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.Value"/>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.Text"/>
            <seealso cref="P:Infragistics.Controls.Editors.TextInputBase.DisplayText"/>
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValueInput.IsValueValidProperty">
            <summary>
            Identifies the Read-Only <see cref="P:Infragistics.Controls.Editors.ValueInput.IsValueValid"/> dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ValueInput.IsValueValid">
            <summary>
            Specifies whether the current value of the editor is valid.
            </summary>
            <remarks>
            <para class="body">
            This property can be used to find out if the current value of the editor is valid.
            Value is considered valid if it can be coerced into a <see cref="P:Infragistics.Controls.Editors.ValueInput.ValueType"/> object
            and it satisfies constraints specified by <see cref="P:Infragistics.Controls.Editors.ValueInput.ValueConstraint"/> object.
            </para>
            <para class="body">
            When the user input can not be parsed into an object of type <i>ValueType</i>, the
            <see cref="P:Infragistics.Controls.Editors.ValueInput.Value"/> property will return the last valid value. However the <see cref="P:Infragistics.Controls.Editors.ValueInput.Text"/>
            property will return the user input.
            </para>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.Value"/>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.Text"/>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.ValueType"/>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.ValueConstraint"/>
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValueInput.HasValueChangedProperty">
            <summary>
            Identifies the Read-Only <see cref="P:Infragistics.Controls.Editors.ValueInput.HasValueChanged"/> dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ValueInput.HasValueChanged">
            <summary>
            Determines if the content has changed while in edit mode (read-only).
            </summary>
            <remarks>
            <para class="body">
            Note that this property is reset to False when the editor leaves edit mode.
            It's meant to be valid while the editor is in edit mode. When not in edit mode,
            this property will return False.
            </para>
            </remarks>
            <seealso cref="E:Infragistics.Controls.Editors.ValueInput.ValueChanged"/>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.OriginalValue"/>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.Value"/>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValueInput.InvalidValueErrorInfoPropertyKey">
            <summary>
            Identifies the property key for read-only <see cref="P:Infragistics.Controls.Editors.ValueInput.InvalidValueErrorInfo"/> dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValueInput.InvalidValueErrorInfoProperty">
            <summary>
            Identifies the read-only <see cref="P:Infragistics.Controls.Editors.ValueInput.InvalidValueErrorInfo"/> dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ValueInput.InvalidValueErrorInfo">
            <summary>
            If the editor's value is invalid, returns error information regarding why it's invalid.
            </summary>
            <remarks>
            <para class="body">
            When the editor's value is invalid, <see cref="P:Infragistics.Controls.Editors.ValueInput.IsValueValid"/> property returns
            false. To get the error information regarding why the value is invalid, use the 
            <see cref="P:Infragistics.Controls.Editors.ValueInput.InvalidValueErrorInfo"/> property which returns an instance 
            <see cref="T:Infragistics.Controls.Editors.ValidationErrorInfo"/> class.
            </para>
            </remarks>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.IsValueValid"/>
            <seealso cref="T:Infragistics.Controls.Editors.ValidationErrorInfo"/>
        </member>
        <member name="P:Infragistics.Controls.Editors.ValueInput.IsNullable">
            <summary>
            Indicates whether the user can delete all the contents of the value editor. Default is <b>true</b>.
            </summary>
            <remarks>
            <para class="body">
            <b>IsNullable</b> indicates to the editor that null editor value (empty contents)
            is considered a valid input. Invalid inputs are handled by <see cref="P:Infragistics.Controls.Editors.ValueInput.InvalidValueBehavior"/>
            property settings.
            </para>
            <seealso cref="P:Infragistics.Controls.Editors.TextInputBase.NullText"/>
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValueInput.IsReadOnlyProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.ValueInput.IsReadOnly"/> dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInput.OnIsReadOnlyChanged">
            <summary>
            Called when the <see cref="P:Infragistics.Controls.Editors.ValueInput.IsReadOnly"/> property has been changed
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ValueInput.IsReadOnly">
            <summary>
            Specifies whether the user is allowed to modify the value in the editor. Default value is <b>false</b>.
            </summary>
            <remarks>
            <para class="body">
            If <b>IsReadOnly</b> is set to <b>True</b> the user will not be allowed to modify the
            value of the editor. However note that you will still be able to modify the value of 
            the editor in code via for example its <see cref="P:Infragistics.Controls.Editors.ValueInput.Value"/> property.
            The default value of this property is <b>False</b>.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInput.ShouldSerializeIsReadOnly">
            <summary>
            Returns true if the IsReadOnly property is set to a non-default value.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInput.ResetIsReadOnly">
            <summary>
            Resets the IsReadOnly property to its default value of <b>false</b>.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValueInput.OriginalValuePropertyKey">
            <summary>
            Identifies the key for the <see cref="P:Infragistics.Controls.Editors.ValueInput.OriginalValue"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValueInput.OriginalValueProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.ValueInput.OriginalValue"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ValueInput.OriginalValue">
            <summary>
            Gets the original value while in edit mode (read-only)
            </summary>
            <remarks>
            <para class="body">
            The <b>OriginalValue</b> property keeps track of the original value when the user 
            enters the editor. This is used to revert back to the original value if the user 
            decides to cancel the edit operation.
            </para>
            </remarks>
            <seealso cref="F:Infragistics.Controls.Editors.ValueInput.OriginalValueProperty"/>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValueInput.FormatProviderProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.ValueInput.FormatProvider"/> dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ValueInput.FormatProvider">
            <summary>
            Specifies format provider used for converting between value and text.
            </summary>
            <remarks>
            <para class="body">
            <b>FormatProvider</b> is used to convert between text and the value. The editor
            will use this along with <see cref="P:Infragistics.Controls.Editors.ValueInput.Format"/> property setting to convert the value 
            to text for display purposes. Note that when editing, only the <i>FormatProvider</i> will 
            be used and the <i>Format</i> property will be ignored. This is to facilitate easier
            editing of values without the clutter of formatting symbols.
            </para>
            <para class="body">
            The default behavior can be changed by providing custom conversion logic using 
            <see cref="P:Infragistics.Controls.Editors.ValueInput.ValueToTextConverter"/> and <see cref="P:Infragistics.Controls.Editors.TextInputBase.ValueToDisplayTextConverter"/>
            properties.
            </para>
            <para class="body">
            <b>Note:</b> <b>FormatProvider</b> property is of type <b>IFormatProvider</b> interface. IFormatProvider 
            is implemented by <b>CultureInfo</b> object therefore this property can be set to an instance of 
            <b>CultureInfo</b>. You can also use <b>DateTimeFormatInfo</b> or <b>NumberFormatInfo</b> as these 
            implement the interface as well.
            </para>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.ValueToTextConverter"/> 
            <seealso cref="P:Infragistics.Controls.Editors.TextInputBase.ValueToDisplayTextConverter"/>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.Format"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInput.ShouldSerializeFormatProvider">
            <summary>
            Returns true if the FormatProvider property is set to a non-default value.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInput.ResetFormatProvider">
            <summary>
            Resets the FormatProvider property to its default value of <b>null</b>.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ValueInput.FormatProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.ValueInput.Format"/> dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ValueInput.Format">
            <summary>
            Specifies format used for converting between value and text.
            </summary>
            <remarks>
            See <see cref="P:Infragistics.Controls.Editors.ValueInput.FormatProvider"/> property for more information.
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInput.ShouldSerializeFormat">
            <summary>
            Returns true if the Format property is set to a non-default value.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInput.ResetFormat">
            <summary>
            Resets the Format property to its default value of <b>null</b>.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ValueInput.DefaultValueToTextConverter">
            <summary>
            Returns the default converter used for converting between the value and the text.
            </summary>
            <remarks>
            <para class="body">
            DefaultValueToTextConverter returns a value converter that provides the default
            logic for converting between value and text. Derived editor classes can override
            this property to return editor specific conversion logic. If you want to provide
            custom conversion logic, use the <see cref="P:Infragistics.Controls.Editors.ValueInput.ValueToTextConverter"/>
            and <see cref="P:Infragistics.Controls.Editors.TextInputBase.ValueToDisplayTextConverter"/> properties.
            </para>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Editors.ValueInput.DefaultValueType">
            <summary>
            Returns the default value type of the editor. When the <see cref="P:Infragistics.Controls.Editors.ValueInput.ValueType"/> property is not set, this is
            the type that the <see cref="P:Infragistics.Controls.Editors.ValueInput.ValueTypeResolved"/> will return.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ValueInput.FocusSite">
            <summary>
            Returns the element that is to revieve keyboard focus when the editor is focused.
            </summary>
            <seealso cref="M:Infragistics.Controls.Editors.ValueInput.OnFocusSiteChanged"/>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInput.RegisterResources(System.String,System.Reflection.Assembly)">
            <summary>
            Adds an additonal Resx file in which the control will pull its resources from.
            </summary>
            <param name="name">The name of the embedded resx file that contains the resources to be used.</param>
            <param name="assembly">The assembly in which the resx file is embedded.</param>
            <remarks>Don't include the extension of the file, but prefix it with the default Namespace of the assembly.</remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInput.UnregisterResources(System.String)">
            <summary>
            Removes a previously registered resx file.
            </summary>
            <param name="name">The name of the embedded resx file that was used for registration.</param>
            <remarks>
            Note: this won't have any effect on controls that are already in view and are already displaying strings.
            It will only affect any new controls created.
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInput.CanEditType(System.Type)">
            <summary>
            Determines if the editor natively supports editing values of specified type.
            </summary>
            <param name="type">The data type to check.</param>
            <returns>Returns True if the editor natively supports editing values of specified type, False otherwise.</returns>
            <remarks>
            <p class="body">
            CanEditType method indicates if the editor natively supports editing values
            of specified type. Typically there is no need to call this method. It's used
            by the value editor infrastructure.
            </p>
            <p class="body">
            <b>Note:</b> CanEditType does not indicate what types can be set on the 
            <see cref="P:Infragistics.Controls.Editors.ValueInput.ValueType"/> property. ValueType property can be set to
            any type as long as there is conversion logic for converting between the native
            data type of the editor and that type. For example, <see cref="T:Infragistics.Controls.Editors.XamMaskedInput"/>
            natively supports editing string type only. However its ValueType can be set to
            Double or DateTime or any type as long as the editor can convert between string
            and that data type. ValueType can even be set to a custom type. You can provide
            custom conversion logic using <see cref="P:Infragistics.Controls.Editors.ValueInput.ValueToTextConverter"/>
            and <see cref="P:Infragistics.Controls.Editors.TextInputBase.ValueToDisplayTextConverter"/> properties.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInput.CanRenderType(System.Type)">
            <summary>
            Determines if the editor natively supports displaying of values of specified type.
            </summary>
            <param name="type">The data type to check.</param>
            <returns>Returns True if the editor natively supports displaying values of specified type, False otherwise.</returns>
            <remarks>
            <p class="body">
            CanRenderType method indicates if the editor natively supports displaying values
            of specified type. Typically there is no need to call this method. It's used
            by the value editor infrastructure.
            </p>
            <p class="body">
            See <see cref="M:Infragistics.Controls.Editors.ValueInput.CanEditType(System.Type)"/> for more information.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInput.IsExtentBasedOnValue(System.Windows.Controls.Orientation)">
            <summary>
            Indicates whether the desired width or the height of the editor is based on the value.
            </summary>
            <param name="orientation">Orientation of the extent being evaluated. Horizontal indicates the width and vertical indicates the height.</param>
            <returns>True if the extent is based on the value.</returns>
            <remarks>
            <p class="body">
            This method is used by the Infragistics internal infrastructure to determine if an editor's
            desired size changes based on the value of the editor. For example, XamCheckEditor returns
            False for both orientation since its width and height both are not related to its value.
            Whether the value of a XamCheckEditor is True or Flase, it will be the same width and height.
            XamTextEditor on the other hand returns True for the horizontal orientation since since 
            the desired size depends on the current value in the editor. It returns True or False
            for the vertical dimension based on whether wrapping is turned on or off respectively.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInput.ValidateCurrentValue">
            <summary>
            Validates the current value of the editor and initializes the <see cref="P:Infragistics.Controls.Editors.ValueInput.IsValueValid"/> 
            property based on the results of the value validation.
            </summary>
            <remarks>
            <para class="body">
            ValueInput automatically validates the value whenever it changes and therefore typically 
            it should not be necessary to call this method. However there may be times when you may
            want to force the value to be re-validated, for instance when the external validation
            criteria changes. This is especially useful when you are overriding the 
            <see cref="M:Infragistics.Controls.Editors.ValueInput.ValidateCurrentValue(System.Exception@)"/> virtual method to provide custom logic
            for the value validation. The ValueInput will update the <see cref="P:Infragistics.Controls.Editors.ValueInput.IsValueValid"/> 
            property to reflect whether the value is valid or not.
            </para>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.IsValueValid"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInput.ValidateValue(System.Object,System.Exception@)">
            <summary>
            Returns true if the specified value would be considered to be valid by the editor
            based on implicit as well as explicit value constraints enforced by the editor. 
            </summary>
            <param name="value">Value to check if it's valid.</param>
            <param name="error">If the value is invalid, this is set to an exception containing appropriate error message.</param>
            <returns>True if the specified value is valid, False otherwise.</returns>
            <remarks>
            <para class="body">
            <b>ValidateValue</b> method is used to determine if a value is valid or not based
            on the implicit as well as explicit value constraints enforced by the editor.
            Implicit value constraints are <see cref="P:Infragistics.Controls.Editors.ValueInput.ValueType"/>,
            <see cref="P:Infragistics.Controls.Editors.XamMaskedInput.Mask"/> etc... and explicit constraints are specified
            via <see cref="P:Infragistics.Controls.Editors.ValueInput.ValueConstraint"/> property.
            </para>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.IsValueValid"/>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.InvalidValueBehavior"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInput.DoInitialization">
            <summary>
            Called from OnInitialized to provide the derived classes an opportunity to 
            perform appropriate initialization tasks. OnInitialized implementation enters
            the editor into edit mode at the end if AlwaysInEditMode is true. This method 
            is called before that.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInput.GetFocusSite">
            <summary>
            Gets the focus site of the editor.
            </summary>
            <returns>FrameworkElement in the template of the editor that is to receive focus.</returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInput.InitializeValueProperties">
            <summary>
            Initializes the value properties. This synchronizes all the value properties if one of
            them is set in xaml since we delay syncrhonization until after initialization in case
            other settings in xaml effect how they are synchronized.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInput.InitializeOriginalValueFromValue">
            <summary>
            Called when starting edit mode to copy the Content propety value into the <see cref="P:Infragistics.Controls.Editors.ValueInput.OriginalValue"/> property.
            </summary>
            <remarks>The default implementation just sets the <see cref="P:Infragistics.Controls.Editors.ValueInput.OriginalValue"/> without any coersions.</remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInput.OnFocusSiteChanged">
            <summary>
            Called when the focus site changes.
            </summary>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.FocusSite"/>
            <seealso cref="M:Infragistics.Controls.Editors.ValueInput.ValidateFocusSite(System.Object,System.Exception@)"/>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInput.OnIsDropDownOpenChanged(System.Boolean)">
            <summary>
            Called when the dropdown is opened or closed
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInput.OnIsInEditModeChanged(System.Boolean)">
            <summary>
            Called when the focus is moved into or out of this editor.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInput.ProcessKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Processes the key down event. Default implementation does nothing.
            This class overrides OnKeyDown and performs some default processing and
            then calls this method if further key down processing is to be done.
            Derived classes are intended to override this method instead of OnKeyDown.
            </summary>
            <param name="e">Key event args.</param>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInput.RevertValueBackToOriginalValue">
            <summary>
            Called when ending edit mode and not accepting the changes.
            </summary>
            <remarks>
            <para class="body">
            The default implementation just sets the Value to <see cref="P:Infragistics.Controls.Editors.ValueInput.OriginalValue"/> without any coersions.
            </para>
            <para class="body">
            See <see cref="P:Infragistics.Controls.Editors.ValueInput.OriginalValue"/> for more information on how OriginalValue gets useed.
            </para>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.OriginalValue"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInput.ValidateFocusSite(System.Object,System.Exception@)">
            <summary>
            Validates the focus site. Returns true if the focus site is acceptable.
            </summary>
            <param name="focusSite">The focus site to validate.</param>
            <param name="errorMessage">If the foucs site is invalid then this out parameter will be assigned relevant error message.</param>
            <returns>True if the focus site is valid, False otherwise.</returns>
            <remarks>
            <para class="body">
            ValidateFocusSite method is called to ensure the element named PART_FocusSite in the control
            template is a valid focus site for the value editor. The default implementation ensures
            that the focus site is either a FrameworkElement or FrameworkContentElement. Derived
            value editors can override this method to further constraint what the focus site can be.
            </para>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.FocusSite"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInput.ValidateCurrentValue(System.Exception@)">
            <summary>
            Validates the current value of the editor. This method is called by the editor to perform
            editor specific validation of the current value.
            </summary>
            <returns>True if the value is valid, False otherwise.</returns>
            <remarks>
            <para class="body">
            <b>ValidateCurrentValue</b> method is called by the editor to determine if the current
            value of the editor is valid or not. It uses this method to update the value of 
            <see cref="P:Infragistics.Controls.Editors.ValueInput.IsValueValid"/> property. The derived editors can override this method to 
            perform editor specific validations.
            </para>
            <para class="body">
            If the value entered by the user is invalid then the editor will take action based
            on the setting of <see cref="P:Infragistics.Controls.Editors.ValueInput.InvalidValueBehavior"/> property when the user attempts
            to leave the editor.
            </para>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.IsValueValid"/>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.InvalidValueBehavior"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInput.SetVisualState(System.Boolean)">
            <summary>
            Called to set the VisualStates of the editor
            </summary>
            <param name="useTransitions">Determines whether transitions should be used.</param>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInput.UpdateVisualStates">
            <summary>
            Called to set the visual states of the control
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInput.UpdateVisualStates(System.Boolean)">
            <summary>
            Called to set the visual states of the control
            </summary>
            <param name="useTransitions">Determines whether transitions should be used.</param>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInput.BeginSyncValueProperties">
            <summary>
            Begins synchronization of value properties (Value, Text, DisplayText, SelectedItem etc...).
            This method suspends raising of any value property changed notifications since they all need
            to be raised after all the value properties are synced. You need to use RaiseValuePropertyChangedEvent
            method to raise value property change notification that need to be delayed in this manner.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInput.ConsiderIsInEditMode(System.String,System.Boolean)">
            <summary>
            When a context menu is opened or a drop-down is opened that takes the focus away from the editor,
            the editor should still be considered logically to be in edit mode or focused. This method is
            used to keep track of any such states that cause the editor to be considered in edit mode regardless
            of the focus status.
            </summary>
            <param name="stateName"></param>
            <param name="state"></param>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInput.EndSyncValueProperties">
            <summary>
            Ends synchronization of value properties and raises any pending value property change 
            notifications. See <see cref="M:Infragistics.Controls.Editors.ValueInput.BeginSyncValueProperties"/> for more info.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInput.HasValueChangedInternal(System.Boolean)">
            <summary>
            Gets a value indicating if the value of the editor has changed since entering edit mode.
            </summary>
            <param name="compareWithOriginalValue">If true then checks if the original value and the
            current value are the same and if so returns false.</param>
            <returns>True if the value has changed, false otherwise.</returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInput.RaiseValuePropertyChangedEvent(Infragistics.Controls.Editors.Primitives.IRaiseEventDefinition)">
            <summary>
            Raises the specified value property change notification. If value property synchronization
            is in progress, delays raising of the event until the syncrhonization is complete.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInput.InitializeCachedPropertyValues">
            <summary>
            Initializes the variables used to cache the dependency property values by
            getting the dependency property metadata for this object and getting DefaultValue
            of that metadata for the respective property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInput.ConvertTextToValue(System.String,System.Object@,System.Exception@)">
            <summary>
            Converts the specified text to the value type using the <see cref="P:Infragistics.Controls.Editors.ValueInput.ValueToTextConverterResolved"/>.
            This method is typically called to convert the text modified by the user back to the ValueType.
            </summary>
            <param name="text">The text to convert.</param>
            <param name="value">This out parameter will be set to the converted value.</param>
            <param name="error">If conversion fails, error is set to a value that indicates the error.</param>
            <returns>True if conversion succeeds, False otherwise.</returns>
            <remarks>
            <p class="body">
            ConvertTextToValue is used to convert text into an object of type specified by 
            <see cref="P:Infragistics.Controls.Editors.ValueInput.ValueType"/> property. This method is typically used to 
            convert the user input in the form of text to the value that gets returned
            from the <see cref="P:Infragistics.Controls.Editors.ValueInput.Value"/> property. Value property returns objects 
            of type specified by ValueType property.
            </p>
            <p class="body">
            For example, if the ValueType property of a <see cref="T:Infragistics.Controls.Editors.XamMaskedInput"/> is set to DateTime type, 
            and the user types in "1/1/07", this method will get called to convert that text value
            into a DateTime object.
            </p>
            <p class="body">
            <b>Note:</b> Typically there is no need for you to call this method directly as this method is 
            automatically called by the ValueInput itself to perform the necessary conversions between text and value.
            </p>
            <p class="body">
            <b>Note:</b> If you want to override the default conversion logic for converting between text and value,
            set the <see cref="P:Infragistics.Controls.Editors.ValueInput.ValueToTextConverter"/> and <see cref="P:Infragistics.Controls.Editors.TextInputBase.ValueToDisplayTextConverter"/>
            properties.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInput.ConvertValueToText(System.Object,System.String@,System.Exception@)">
            <summary>
            Converts the specified value to text using the <see cref="P:Infragistics.Controls.Editors.ValueInput.ValueToTextConverterResolved"/>.
            This method is used to display the value of the editor when the editor is in edit mode.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="text">This out parameter will be set to the converted text.</param>
            <param name="error">If conversion fails, error is set to a value that indicates the error.</param>
            <returns>True if conversion succeeds, False otherwise.</returns>
            <remarks>
            <p class="body">
            ConvertValueToText is used to convert value to text. This method is typically used to 
            convert the value of the editor (as specified by the <see cref="P:Infragistics.Controls.Editors.ValueInput.Value"/> property)
            into text that the user can edit when the editor enters edit mode. When not in edit mode,
            <see cref="M:Infragistics.Controls.Editors.TextInputBase.ConvertValueToDisplayText(System.Object,System.String@,System.Exception@)"/> method is used to convert value
            to text that gets displayed in the editor. The <see cref="P:Infragistics.Controls.Editors.ValueInput.Text"/> property's return value
            corresponds to the text that this method converts where as the <see cref="P:Infragistics.Controls.Editors.TextInputBase.DisplayText"/> 
            property's return value corresponds to the text that ConvertValueToDisplayText method converts.
            </p>
            <p class="body">
            <b>Note</b> that DisplayText and ConvertValueToDisplayText methods are defined on <see cref="T:Infragistics.Controls.Editors.TextInputBase"/>
            class. This is because display text conversions are only applicable for text based editors, all of which
            derive from TextInputBase.
            </p>
            <p class="body">
            As an example, the ValueType property of a <see cref="T:Infragistics.Controls.Editors.XamMaskedInput"/> is set to DateTime type, 
            and the <see cref="P:Infragistics.Controls.Editors.ValueInput.Value"/> property is set to a "01/01/2007" DateTime instance.
            This method gets called to convert that DateTime value to a string when the user enters
            edit mode. When the editor is not in edit mode, <see cref="M:Infragistics.Controls.Editors.TextInputBase.ConvertValueToDisplayText(System.Object,System.String@,System.Exception@)"/>
            is used. The difference between this method and ConvertValueToDisplayText is that the
            ConvertValueToDisplayText will take into account <see cref="P:Infragistics.Controls.Editors.ValueInput.FormatProvider"/>
            and <see cref="P:Infragistics.Controls.Editors.ValueInput.Format"/> property settings where as ConvertValueToText will not.
            </p>
            <p class="body">
            <b>Note:</b> Typically there is no need for you to call this method directly as this method is 
            automatically called by the ValueInput itself to perform the necessary conversions between value 
            and text.
            </p>
            <p class="body">
            <b>Note:</b> If you want to override the default conversion logic for converting between value and text,
            set the <see cref="P:Infragistics.Controls.Editors.ValueInput.ValueToTextConverter"/> and <see cref="P:Infragistics.Controls.Editors.TextInputBase.ValueToDisplayTextConverter"/>
            properties.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInput.ProcessPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when a property value has changed
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInput.RevalidateCurrentValue">
            <summary>
            Validates the current value and updates the IsValueValid property accordingly. However
            note that this doesn't raise any events or display error messages. It simply checks if the
            current value is valid and based on that updates the IsValueValid property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInput.SyncValuePropertiesOverride(System.Windows.DependencyProperty,System.Object,System.Exception@)">
            <summary>
            Called to synchronize value and text properties. Derived classes can override this
            method if they have their own value properties (like the XamCheckEditor which has
            IsChecked property) because the Value, Text and all other editor specific value
            related properties need to be kept in sync. Default implementation synchronizes
            Value and Text properties.
            </summary>
            <param name="prop">Property that changed.</param>
            <param name="newValue">New value of the property.</param>
            <param name="error">Set this to the any error message if synchronization fails (for example
            because of type conversion or some other problem with syncrhonizing the new value).</param>
            <returns>Value indicating whether the new value should be considered valid. If false is
            returned, IsValueValid property will be set to false.</returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValueInputDefaultConverter.HandleNullValueHelper(System.Boolean,System.Object,System.Type,Infragistics.Controls.Editors.ValueInput,System.Object@)">
            <summary>
            Handles null and empty string values.
            </summary>
            <param name="convertingBack">Whether converting back.</param>
            <param name="value">Value to convert.</param>
            <param name="targetType">Type to convert the value to.</param>
            <param name="editor">Optional - can be null.</param>
            <param name="convertedValue">This will be assigned the converted value.</param>
            <returns>Returns true if the value was handled.</returns>
        </member>
        <member name="T:Infragistics.Controls.Editors.XamCurrencyInput">
            <summary>
            Allows editing of currency data based on a mask.
            </summary>
            <remarks>
            <p class="body">The <b>XamCurrencyInput</b> is a derived <see cref="T:Infragistics.Controls.Editors.XamMaskedInput"/> that is designed to 
            display and edit currency data. By default, its <see cref="P:Infragistics.Controls.Editors.ValueInput.ValueType"/> property is set to 
            <see cref="T:System.Decimal"/>.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamCurrencyInput.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Controls.Editors.XamCurrencyInput"/>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.XamCurrencyInput.DefaultValueType">
            <summary>
            Returns the default value type of the editor. When the <see cref="P:Infragistics.Controls.Editors.ValueInput.ValueType"/> property is not set, this is
            the type that the <see cref="P:Infragistics.Controls.Editors.ValueInput.ValueTypeResolved"/> will return.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Editors.XamMaskedInput">
            <summary>
            Value editor for displaying and editing data based on a mask.
            </summary>
            <remarks>
            <p class="body">
            <b>XamMaskedInput</b> is an editor control that lets you display and edit values based on a mask. The mask is 
            specified via its <see cref="P:Infragistics.Controls.Editors.XamMaskedInput.Mask"/> property. If a mask is not explicitly set then a default mask 
            is used based on the <see cref="P:Infragistics.Controls.Editors.ValueInput.ValueType"/> property. The default mask is determined using the masks 
            that are registered for specific types using <see cref="M:Infragistics.Controls.Editors.XamMaskedInput.RegisterDefaultMaskForType(System.Type,System.String)"/>.</p>
            <seealso cref="T:Infragistics.Controls.Editors.ValueInput"/>
            <seealso cref="T:Infragistics.Controls.Editors.TextInputBase"/>
            </remarks>
        </member>
        <member name="E:Infragistics.Controls.Editors.XamMaskedInput.InvalidChar">
            <summary>
            Occurs when the user types a character that fails mask validation.
            </summary>
            <remarks>
            <para class="body">
            The InvalidChar event is fired when user types a character that does not match the mask associated with the current input position.
            </para>
            <seealso cref="T:Infragistics.Controls.Editors.InvalidCharEventArgs"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMaskedInput.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Controls.Editors.XamMaskedInput"/>
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMaskedInput.CanEditType(System.Type)">
            <summary>
            Overridden. Determines if the editor natively supports editing values of specified type.
            </summary>
            <param name="type">The data type to check.</param>
            <returns>Returns True if the editor natively supports editing values of specified type, False otherwise.</returns>
            <remarks>
            <p class="body">
            XamMaskedInput's implementation returns True for the string, sbyte, byte, 
            short, ushort, int, uint, long, ulong, float, double, decimal and DateTime data types.
            </p>
            <p class="body">
            For these data types the editor will calculate a default mask. For any other
            data type, you should specify a mask that makes sense for the data type other wise
            a default mask will be used. You can change/register default masks for these and other
            data types using the <see cref="M:Infragistics.Controls.Editors.XamMaskedInput.RegisterDefaultMaskForType(System.Type,System.String)"/> method.
            </p>
            <p class="body">
            See ValueInput's <see cref="M:Infragistics.Controls.Editors.ValueInput.CanEditType(System.Type)"/> for more information.
            </p>
            </remarks>
            <seealso cref="T:System.ValueType"/>
            <seealso cref="P:Infragistics.Controls.Editors.XamMaskedInput.Mask"/>
            <seealso cref="M:Infragistics.Controls.Editors.ValueInput.CanEditType(System.Type)"/>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMaskedInput.CanRenderType(System.Type)">
            <summary>
            Overridden. Determines if the editor natively supports displaying of values of specified type.
            </summary>
            <param name="type">The data type to check.</param>
            <returns>Returns True if the editor natively supports displaying values of specified type, False otherwise.</returns>
            <remarks>
            <p class="body">
            See ValueInput's <see cref="M:Infragistics.Controls.Editors.ValueInput.CanRenderType(System.Type)"/> for more information.
            </p>
            </remarks>
            <seealso cref="M:Infragistics.Controls.Editors.XamMaskedInput.CanEditType(System.Type)"/>
            <seealso cref="M:Infragistics.Controls.Editors.ValueInput.CanRenderType(System.Type)"/>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMaskedInput.OnCreateAutomationPeer">
            <summary>
            Returns an automation peer that exposes the <see cref="T:Infragistics.Controls.Editors.XamMaskedInput"/> to UI Automation.
            </summary>
            <returns>A <see cref="T:Infragistics.AutomationPeers.XamMaskedInputAutomationPeer"/></returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMaskedInput.DoInitialization">
            <summary>
            Overridden. Called from OnInitialized to provide the derived classes an opportunity to 
            perform appropriate initialization tasks. OnInitialized implementation enters
            the editor into edit mode at the end if AlwaysInEditMode is true. This method 
            is called before that.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMaskedInput.GetFocusSite">
            <summary>
            Gets the focus site of the editor.
            </summary>
            <returns>FrameworkElement in the template of the editor that is to receive focus.</returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMaskedInput.OnCoerceText(System.String)">
            <summary>
            Overridden. Called from the <see cref="P:Infragistics.Controls.Editors.ValueInput.Text"/> property's CoerceValue handler.
            </summary>
            <param name="text">The text to coerce</param>
            <returns>Coerced value</returns>
            <remarks>
            <para class="body">
            XamMaskedInput's implementation applies mask to the <paramref name="text"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMaskedInput.ValidateCurrentValue(System.Exception@)">
            <summary>
            Validates the current value of the editor. This method is called by the editor to perform
            editor specific validation of the current value.
            </summary>
            <returns>True if the value is valid, False otherwise.</returns>
            <remarks>
            See ValueInput's <see cref="M:Infragistics.Controls.Editors.ValueInput.ValidateCurrentValue(System.Exception@)"/> for more information.
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.IsValueValid"/>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.InvalidValueBehavior"/>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Editors.XamMaskedInput.DefaultValueType">
            <summary>
            Returns the default value type of the editor. When the <see cref="T:System.ValueType"/> property is not set, this is
            the type that the <see cref="P:Infragistics.Controls.Editors.ValueInput.ValueTypeResolved"/> will return.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMaskedInput.OnFocusSiteChanged">
            <summary>
            Overridden. Called when the focus site changes.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMaskedInput.OnValueChanged(System.Object,System.Object)">
            <summary>
            Called when <b>Value</b> property changes or the contents of the editor changes.
            </summary>
            <seealso cref="E:Infragistics.Controls.Editors.ValueInput.ValueChanged"/>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMaskedInput.OnValueConstraintChanged(System.String)">
            <summary>
            This method is called whenever the ValueConstraint or one of its properties changes.
            </summary>
            <param name="valueConstraintPropertyName">Null if the ValueConstraint itself changed or 
            the name of the property that changed.</param>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMaskedInput.ProcessKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Overridden. Processes the key down event. It executes associated commands if any.
            </summary>
            <param name="args">Key event args.</param>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMaskedInput.ValidateValue(System.Object,System.Exception@)">
            <summary>
            Returns true if the specified value would be considered to be valid by 
            the editor based on implicit as well as explicit value constraints enforced by the editor. 
            </summary>
            <param name="value">Value to check if it's valid.</param>
            <param name="error">If the value is invalid, this is set to an exception containing appropriate error message.</param>
            <returns>True if the specified value is valid, False otherwise.</returns>
            <remarks>
            <para class="body">
            <b>ValidateValue</b> method is used to determine if a value is valid or not based
            on the implicit as well as explicit value constraints enforced by the editor.
            Implicit value constraints are <see cref="P:Infragistics.Controls.Editors.ValueInput.ValueType"/>,
            <see cref="P:Infragistics.Controls.Editors.XamMaskedInput.Mask"/> etc... and explicit constraints are specified
            via <see cref="P:Infragistics.Controls.Editors.ValueInput.ValueConstraint"/> property.
            </para>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.IsValueValid"/>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.InvalidValueBehavior"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMaskedInput.InitializeCachedPropertyValues">
            <summary>
            Initializes the variables used to cache the dependency property values by
            getting the dependency property metadata for this object and getting DefaultValue
            of that metadata for the respective property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMaskedInput.GetNumberSectionValueHelper(Infragistics.Controls.Editors.SectionsCollection,System.Type)">
            <summary>
            Gets the value of the number section of the specified type. If the section is not found returns -2 and
            if the section is empty returns -1.
            </summary>
            <param name="sections"></param>
            <param name="sectionType"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMaskedInput.InternalGetDateValue(Infragistics.Controls.Editors.SectionsCollection)">
            <summary>
            Gets the date value if there are year, month and day sections and they are all filled.
            </summary>
            <param name="sections"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMaskedInput.SetText(Infragistics.Controls.Editors.SectionsCollection,System.String,System.Char,System.Char)">
            <summary>
            Sets the text to sections collection.
            </summary>
            <param name="sections">Sections to be updated</param>
            <param name="text">Text used to update the sections</param>
            <param name="promptCharacter">Character interpretted as the prompt character</param>
            <param name="padCharacter">Character interpretted as the pad character</param>
            <returns>Number of characters from text that matched.</returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMaskedInput.SetText(Infragistics.Controls.Editors.SectionsCollection,System.String,System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Sets the text to sections collection.
            </summary>
            <param name="sections">Sections to be updated</param>
            <param name="text">Text used to update the sections</param>
            <param name="promptCharacter">Character interpretted as the prompt character</param>
            <param name="padCharacter">Character interpretted as the pad character</param>
            <param name="skipDigitSeparator">True if the value may be numeric in which case digit separators should be ignored; otherwise false.</param>
            <param name="validateSections">True to validate sections after setting the text, otherwise false.</param>
            <returns>Number of characters from text that matched.</returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMaskedInput.ShouldUseValueToTextConverter(Infragistics.Controls.Editors.MaskInfo)">
            <summary>
            If the mask is a custom mask that we don't know how to interpret for a specific type and a custom
            value to text converter is specified then we should use that converter.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMaskedInput.IsDateTimeSection(Infragistics.Controls.Editors.EditSectionBase)">
            <summary>
            Returns true if the specified edit section is year, month, day, hour, minute, second or am/pm section.
            </summary>
            <param name="editSection"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMaskedInput.GetFlag(Infragistics.Controls.Editors.XamMaskedInput.InternalFlags)">
            <summary>
            Returns true if any of the specified bits are true.
            </summary>
            <param name="flag">Flag(s) to evaluate</param>
            <returns></returns>
        </member>
        <member name="F:Infragistics.Controls.Editors.XamMaskedInput.TrimFractionalZerosProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.XamMaskedInput.TrimFractionalZeros"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.XamMaskedInput.TrimFractionalZeros">
            <summary>
            Specifies whether to trim insignificant zero's in fraction part of numeric masks. Default value is <b>False</b>.
            </summary>
            <remarks>
            <b>TrimFractionalZeros</b> property specifies whether to trim insignificant zero's in fraction
            part of numeric masks. By defualt fraction part is padded with zero's to the right. If this 
            property is set to <i>true</i>, this padding of zero's will not occur and furthermore any
            insignificant zero's will be removed.
            </remarks>
            <seealso cref="F:Infragistics.Controls.Editors.XamMaskedInput.TrimFractionalZerosProperty"/>
        </member>
        <member name="F:Infragistics.Controls.Editors.XamMaskedInput.SpinButtonDisplayModeProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.XamMaskedInput.SpinButtonDisplayMode"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.XamMaskedInput.SpinButtonDisplayMode">
            <summary>
            Specifies if and when to display spin buttons which are used to increment or decrement the editor value.
            Default value is <b>Never</b>.
            </summary>
            <remarks>
            <para class="body">
            <b>SpinButtonDisplayMode</b> specifies if and when to display the spin buttons in the control. Spin buttons 
            allow the user to increment and decrement the current value in the editor. By default the value of the current
            section (section where the caret is) is incremented or decremented. If you specify the <see cref="P:Infragistics.Controls.Editors.XamMaskedInput.SpinIncrement"/>
            property then the whole value of the editor will be incremented or decremented by that value depending upon
            whether the up or down spin button is pressed, respectively.
            </para>
            </remarks>
            <seealso cref="P:Infragistics.Controls.Editors.XamMaskedInput.SpinIncrement"/>
            <seealso cref="P:Infragistics.Controls.Editors.XamMaskedInput.SpinWrap"/>
        </member>
        <member name="F:Infragistics.Controls.Editors.XamMaskedInput.SpinButtonStyleProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.XamMaskedInput.SpinButtonStyle"/> dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.XamMaskedInput.SpinButtonStyle">
            <summary>
            Used for setting the Style of the spin buttons which are instances of RepeatButton class. Default value is null.
            </summary>
            <remarks>
            <para class="body">
            Default value of this property is null. You can use this property to specify a Style object to use for the
            spin buttons, which are RepeatButton instances, displayed inside the editor.
            </para>
            </remarks>
            <seealso cref="P:Infragistics.Controls.Editors.XamMaskedInput.SpinButtonDisplayMode"/>
            <seealso cref="P:Infragistics.Controls.Editors.XamMaskedInput.SpinIncrement"/>
        </member>
        <member name="F:Infragistics.Controls.Editors.XamMaskedInput.SpinButtonVisibilityResolvedPropertyKey">
            <summary>
            Identifies the property key for read-only <see cref="P:Infragistics.Controls.Editors.XamMaskedInput.SpinButtonVisibilityResolved"/> dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.XamMaskedInput.SpinButtonVisibilityResolvedProperty">
            <summary>
            Identifies the read-only <see cref="P:Infragistics.Controls.Editors.XamMaskedInput.SpinButtonVisibilityResolved"/> dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.XamMaskedInput.SpinButtonVisibilityResolved">
            <summary>
            Returns the value indicating whether the spin buttons should be displayed.
            </summary>
            <remarks>
            <para class="body">
            <b>SpinButtonVisibilityResolved</b> property returns the resolved value indicating 
            the visibility of the spin buttons in the control. This property is used by the
            control template to control the visibility of the spin buttons.
            </para>
            <para class="body">
            Set the <see cref="P:Infragistics.Controls.Editors.XamMaskedInput.SpinButtonDisplayMode"/> property to control if and when the
            spin buttons are displayed.
            </para>
            </remarks>
            <seealso cref="P:Infragistics.Controls.Editors.XamMaskedInput.SpinButtonDisplayMode"/>
        </member>
        <member name="F:Infragistics.Controls.Editors.XamMaskedInput.SpinIncrementProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.XamMaskedInput.SpinIncrement"/> dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.XamMaskedInput.SpinIncrement">
            <summary>
            Specifies the amount by which to increase or decrease the value of the editor when 
            up or down spin button is clicked.
            </summary>
            <remarks>
            <para class="body">
            <b>SpinIncrement</b> property specifies the amount by which the value of the editor
            will be increased or decreased when up or down spin button is clicked, respectively.
            </para>
            <para class="body">
            The amount one specifies depends on the type of values that the editor edits. 
            When the editor is used for numeric values then the spin increment amount can be 
            specified as a numeric value in the form of any numeric type (for example 5, 10.5 etc...), 
            as long as the type can be converted to match the editor's <see cref="T:System.ValueType"/>.
            A special string vlaue of "log" is supported for numeric types where the editor's
            value is incremented in an accelerated fashion when the mouse button is held pressed 
            over the spin button for a certain amount of time.
            </para>
            <para class="body">
            When date and time values are being edited, you can specify the amount as a TimeSpan
            instance or as one of the following tokens.
            <list type="bullet">
            
            <item>
            <term>"1d"</term>
            <description>
            Date will be incremented or decrement by 1 day. You can specify
            a different integer value for the number of days, for example "10d".
            </description>
            </item>
            
            <item>
            <term>"1m"</term>
            <description>
            Depending on the mask type, date or time will be incremented or decrement 
            by 1 month or 1 minute. If the mask is a date mask, month will be affected.
            If the mask is a time mask, minute will be affect. You can specify
            a different integer value for the number of months or minutes, for example 
            "2m".
            </description>
            </item>
            
            <item>
            <term>"1y"</term>
            <description>
            Date will be incremented or decrement by 1 year. You can specify
            a different integer value for the number of years, for example "2y".
            </description>
            </item>
            
            <item>
            <term>"1h"</term>
            <description>
            Time will be incremented or decrement by 1 hour. You can specify
            a different integer value for the number of hours, for example "2h".
            </description>
            </item>
            
            <item>
            <term>"1s"</term>
            <description>
            Time will be incremented or decrement by 1 second. You can specify
            a different integer value for the number of hours, for example "2s".
            </description>
            </item>
            
            </list>
            </para>
            </remarks>
            <seealso cref="P:Infragistics.Controls.Editors.XamMaskedInput.SpinWrap"/>
        </member>
        <member name="P:Infragistics.Controls.Editors.XamMaskedInput.HasSpinIncrement">
            <summary>
            Returns true if the SpinIncrement has been set to a valid value.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.XamMaskedInput.SpinWrapProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.XamMaskedInput.SpinWrap"/> dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.XamMaskedInput.SpinWrap">
            <summary>
            Returns or sets a value indicating whether the control's spin buttons should wrap its value. Default value is <b>False</b>.
            </summary>
            <remarks>
            <p class="body">
            If True the spin button will wrap the value incremented/decremented based on its Min/Max value.
            When incrementing the value and the value is already at its maximum, the value will wrap to 
            minimum value. The same applies when decrementing the value.
            </p>
            <p class="body">
            To actually specify the minimum and maximum value, use the <see cref="P:Infragistics.Controls.Editors.ValueInput.ValueConstraint"/>
            property.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMaskedInput.Beep">
            <summary>
            Calls the MessageBeep api
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.XamMaskedInput.SectionsProperty">
            <summary>
            Identifies the Read-Only <see cref="P:Infragistics.Controls.Editors.XamMaskedInput.Sections"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.XamMaskedInput.Sections">
            <summary>
            A collection of the sections used in the control. Returns
            a valid collection only if the mask has been parsed yet.
            </summary>
            <remarks>
            <para class="body">
            When mask is parsed the result is a collection of <see cref="T:Infragistics.Controls.Editors.SectionBase"/> derived
            objects. This property returns that collection. Each SectionBase object has 
            a collection of its display characters return via its <see cref="P:Infragistics.Controls.Editors.SectionBase.DisplayChars"/>
            property. XamMaskedInput also exposes a collection that contains aggregate display characters 
            of all sections via its <see cref="P:Infragistics.Controls.Editors.XamMaskedInput.DisplayChars"/> property.
            </para>
            <para class="body">
            This property is useful for example if you want to query and find out the structure 
            of the parsed mask or to query and/or manipulate the current user input on a per
            section or per display character basis.
            </para>
            <seealso cref="P:Infragistics.Controls.Editors.XamMaskedInput.DisplayChars"/>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Editors.XamMaskedInput.DisplayChars">
            <summary>
            A collection of the display characters used in the control. Returns
            a valid collection only if the mask has been parsed yet.
            </summary>
            <remarks>
            <para class="body">
            Returns a collection of display characters. When mask is parsed, result is
            a collection of sections where each section corresponds with a part of the
            mask. Each section in turn has a collection of <see cref="T:Infragistics.Controls.Editors.DisplayCharBase"/>
            derived objects each of which correspond to a placeholder character in the 
            part of the mask associated with the section. DisplayChars returns the 
            aggregate display character instances from all sections.
            </para>
            <para class="body">
            See <see cref="P:Infragistics.Controls.Editors.XamMaskedInput.Sections"/> for more information on potential usage of this
            and Sections property.
            </para>
            <seealso cref="P:Infragistics.Controls.Editors.XamMaskedInput.Sections"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMaskedInput.RegisterDefaultMaskForType(System.Type,System.String)">
            <summary>
            Changes the default mask used by the MaskedInput for the specified data type.
            </summary>
            <param name="dataType">Data type for which to register the mask.</param>
            <param name="mask">The default mask that will be used for the specified data type.</param>
            <remarks>
            <para class="body">
            If a mask is not explicitly specified on a MaskedInput or derived editor, 
            a default is calculated based on the data type. You can override these 
            default calculated masks using this method.
            </para>
            <seealso cref="M:Infragistics.Controls.Editors.XamMaskedInput.GetDefaultMaskForType(System.Type)"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMaskedInput.ResetDefaultMaskForType(System.Type)">
            <summary>
            Resets the default mask for the specified data type to the default value.
            </summary>
            <param name="dataType">Data type for which to reset the mask to the default mask.</param>
            <remarks>
            <para class="body">
            This method is used to revert any default masks that were registered using 
            <see cref="M:Infragistics.Controls.Editors.XamMaskedInput.RegisterDefaultMaskForType(System.Type,System.String)"/> method. The mask will be reverted back
            to the default mask that's calculated by the MaskedInput.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMaskedInput.GetDefaultMaskForType(System.Type)">
            <summary>
            Returns the default mask that will be used for the specified data type by the MaskedInput
            and derived editors for the specified data type.
            </summary>
            <param name="dataType">Gets the default mask that will be used for the specified data type, if a default exists for this type.</param>
            <returns></returns>
            <remarks>
            <para class="body">
            You can change the default masks using the <see cref="M:Infragistics.Controls.Editors.XamMaskedInput.RegisterDefaultMaskForType(System.Type,System.String)"/> static method.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMaskedInput.SupportsDataType(System.Type)">
            <summary>
            Returns true if the data type is supported by the XamMaskedInput, false otherwise.
            </summary>
            <param name="dataType"><see cref="T:System.Type"/></param>
            <returns><b>True</b> if type is supported, <b>False</b> otherwise.</returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMaskedInput.CalcDefaultTimeMask(System.IFormatProvider)">
            <summary>
            Calculates the default mask for time based on the specified format provider.
            </summary>
            <param name="formatProvider">The format provider to use to get necessary format 
            information to derive the mask from.
            Can be a CultureInfo or a DateTimeFormatInfo instance.
            </param>
            <returns>Mask as a string.</returns>
            <remarks>
            <para class="body">
            Typically there is no need for you to directly call this method. If the ValueType
            is set to DateTime the XamMaskedInput and derived editors will call this method 
            to calculate the mask if none has been explicitly set. Also if you want to explicitly
            set the mask to make use of culture sensitive date and time mask then use the following
            mask tokens when setting the <see cref="P:Infragistics.Controls.Editors.XamMaskedInput.Mask"/> property:
            <ul>
            <li><b>{date}</b> - Date mask based on <i>short</i> date pattern setting of the system.</li>
            <li><b>{time}</b> - Time mask based on <i>short</i> time pattern setting of the system. Short time pattern typically does not include seconds portion.</li>
            <li><b>{longtime} - Time mask based on <i>long</i> time pattern setting of the system. Long time pattern typically includes seconds portion.</b></li>
            </ul>
            </para>
            <seealso cref="P:Infragistics.Controls.Editors.XamMaskedInput.Mask"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMaskedInput.CalcDefaultLongTimeMask(System.IFormatProvider)">
            <summary>
            Calculates the default mask for long time based on the specified format provider.
            </summary>
            <param name="formatProvider">The format provider to use to get necessary format 
            information to derive the mask from.
            Can be a CultureInfo or a DateTimeFormatInfo instance.
            </param>
            <returns>Mask as a string.</returns>
            <remarks>
            <para class="body">
            Typically there is no need for you to directly call this method. If the ValueType
            is set to DateTime the XamMaskedInput and derived editors will call this method 
            to calculate the mask if none has been explicitly set. Also if you want to explicitly
            set the mask to make use of culture sensitive date and time mask then use the following
            mask tokens when setting the <see cref="P:Infragistics.Controls.Editors.XamMaskedInput.Mask"/> property:
            <ul>
            <li><b>{date}</b> - Date mask based on <i>short</i> date pattern setting of the system.</li>
            <li><b>{time}</b> - Time mask based on <i>short</i> time pattern setting of the system. Short time pattern typically does not include seconds portion.</li>
            <li><b>{longtime} - Time mask based on <i>long</i> time pattern setting of the system. Long time pattern typically includes seconds portion.</b></li>
            </ul>
            </para>
            <seealso cref="P:Infragistics.Controls.Editors.XamMaskedInput.Mask"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMaskedInput.CalcDefaultDateMask(System.IFormatProvider)">
            <summary>
            Calculates the default mask for date based on the specified format provider.
            </summary>
            <param name="formatProvider">The format provider to use to get necessary format 
            information to derive the mask from.
            Can be a CultureInfo or a DateTimeFormatInfo instance.
            </param>
            <returns>Mask as a string.</returns>
            <remarks>
            <para class="body">
            Typically there is no need for you to directly call this method. If the ValueType
            is set to DateTime the XamMaskedInput and derived editors will call this method 
            to calculate the mask if none has been explicitly set. Also if you want to explicitly
            set the mask to make use of culture sensitive date and time mask then use the following
            mask tokens when setting the <see cref="P:Infragistics.Controls.Editors.XamMaskedInput.Mask"/> property:
            <ul>
            <li><b>{date}</b> - Date mask based on <i>short</i> date pattern setting of the system.</li>
            <li><b>{time}</b> - Time mask based on <i>short</i> time pattern setting of the system. Short time pattern typically does not include seconds portion.</li>
            <li><b>{longtime} - Time mask based on <i>long</i> time pattern setting of the system. Long time pattern typically includes seconds portion.</b></li>
            </ul>
            </para>
            <seealso cref="P:Infragistics.Controls.Editors.XamMaskedInput.Mask"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMaskedInput.CalcDefaultDateMask(System.IFormatProvider,System.Boolean)">
            <summary>
            Calculates the default mask for date based on the specified format provider.
            </summary>
            <param name="formatProvider">The format provider to use to get necessary format 
            information to derive the mask from.
            Can be a CultureInfo or a DateTimeFormatInfo instance.
            </param>
            <param name="usePostfixSeparatorsFromLongDatePattern">
            This parameter indicates whether to use culture specific date separators that
            are composed of postfix symbols from the long date pattern of the culture's 
            date-time format information. 
            </param>
            <returns>Mask as a string.</returns>
            <remarks>
            <para class="body">
            Typically there is no need for you to directly call this method. If the ValueType
            is set to DateTime the XamMaskedInput and derived editors will call this method 
            to calculate the mask if none has been explicitly set. Also if you want to explicitly
            set the mask to make use of culture sensitive date and time mask then use the following
            mask tokens when setting the <see cref="P:Infragistics.Controls.Editors.XamMaskedInput.Mask"/> property:
            <ul>
            <li><b>{date}</b> - Date mask based on <i>short</i> date pattern setting of the system.</li>
            <li><b>{time}</b> - Time mask based on <i>short</i> time pattern setting of the system. Short time pattern typically does not include seconds portion.</li>
            <li><b>{longtime} - Time mask based on <i>long</i> time pattern setting of the system. Long time pattern typically includes seconds portion.</b></li>
            </ul>
            </para>
            <seealso cref="P:Infragistics.Controls.Editors.XamMaskedInput.Mask"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMaskedInput.CalcDefaultCurrencyMask(System.IFormatProvider,System.Int32,System.Int32,System.Char,System.Boolean)">
            <summary>
            Calculates the default mask for currency based on the cultureInfo.
            </summary>
            <param name="formatProvider">Format provider to use to construct a default mask with. Can be a CultureInfo or a NumberFormatInfo instance.</param>
            <param name="integerDigits">Number of digits in integer section. -1 means use a default. Can be 0 in which case there won't be an integer portion.</param>
            <param name="fractionDigits">Number of digits in fraction section. -1 means use one specified by culture info. Can be 0 in which case there won't be fraction section.</param>
            <param name="allowNegatives">If '-' or '+' then negative numbers are allowed. '-' specifies that the minus sign should be displayed only when the number is negative. '+' specifies that the plus or minus sign will always be displayed depending on whther the number is negative or positive. If this parameter is any other character then it's ignored.</param>
            <param name="includeCurrencySymbol">Specifies whether the mask should include the currency symbol.</param>
            <returns>Mask as a string.</returns>
            <remarks>
            <para class="body">
            Typically there is no need for you to directly call this method. If the ValueType
            is set to Decimal the XamMaskedInput and derived editors will call this method 
            to calculate the mask if none has been explicitly set. Also if you want to explicitly
            set the mask to make use of culture sensitive currency mask then use one of the
            currency tokens as documented in the table listing all the mask tokens in the
            help for <see cref="P:Infragistics.Controls.Editors.XamMaskedInput.Mask"/> property.
            </para>
            <seealso cref="P:Infragistics.Controls.Editors.XamMaskedInput.Mask"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMaskedInput.CalcDefaultDoubleMask(System.IFormatProvider,System.Int32,System.Int32,System.Char)">
            <summary>
            Calculates the default mask for double mask based on the CultureInfo
            </summary>
            <param name="formatProvider">Format provider to use to construct a default mask with. Can be a CultureInfo or a NumberFormatInfo instance.</param>
            <param name="integerDigits">Number of digits in integer section. -1 means use a default. Can be 0 in which case there won't be an integer portion.</param>
            <param name="fractionDigits">Number of digits in fraction section. -1 means use one specified by culture info. Can be 0 in which case there won't be fraction section.</param>
            <param name="allowNegatives">If '-' or '+' then negative numbers are allowed. '-' specifies that the minus sign should be displayed only when the number is negative. '+' specifies that the plus or minus sign will always be displayed depending on whther the number is negative or positive. If this parameter is any other character then it's ignored.</param>
            <returns>Mask as a string.</returns>
            <remarks>
            <para class="body">
            Typically there is no need for you to directly call this method. If the ValueType
            is set to Double or Float, the XamMaskedInput and derived editors will call this method 
            to calculate the mask if none has been explicitly set. Also if you want to explicitly
            set the mask to make use of culture sensitive double/float mask then use one of the
            double tokens as documented in the table listing all the mask tokens in the
            help for <see cref="P:Infragistics.Controls.Editors.XamMaskedInput.Mask"/> property.
            </para>
            <seealso cref="P:Infragistics.Controls.Editors.XamMaskedInput.Mask"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMaskedInput.IsMaskValidForDataType(System.Type,System.String,System.IFormatProvider)">
            <summary>
            Returns true if mask is valid for the type.
            </summary>
            <param name="dataType"></param>
            <param name="mask"></param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMaskedInput.IsMaskValidForDataType(System.Type,Infragistics.Controls.Editors.SectionsCollection)">
            <summary>
            Returns true if mask is valid for the type.
            </summary>
            <param name="dataType"></param>
            <param name="parsedSections"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMaskedInput.GetText(Infragistics.Controls.Editors.InputMaskMode)">
            <summary>
            Returns the current text of the editor based on the specified mask mode.
            </summary>
            <param name="maskMode">The mode that determines how literals and prompt characters are accounted for.</param>
            <returns>The current text of the editor with the specified mask mode applied to it.</returns>
            <remarks>
            <para class="body">
            <see cref="P:Infragistics.Controls.Editors.ValueInput.Text"/> property can also be used to retrieve the current text of the editor.
            The Text property will return a value with the mask mode specified by the <see cref="P:Infragistics.Controls.Editors.XamMaskedInput.DataMode"/>
            property applied to the returned value. This method allows you to use any mode without having to
            set the DataMode property.
            </para>
            <para class="body">
            Any of <see cref="P:Infragistics.Controls.Editors.ValueInput.Value"/>, <see cref="P:Infragistics.Controls.Editors.ValueInput.Text"/> and <see cref="P:Infragistics.Controls.Editors.TextInputBase.DisplayText"/> 
            properties can also be used to retrieve the current value of the editor.
            </para>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.Value"/>
            <seealso cref="P:Infragistics.Controls.Editors.ValueInput.Text"/>
            <seealso cref="P:Infragistics.Controls.Editors.TextInputBase.DisplayText"/>
            <seealso cref="P:Infragistics.Controls.Editors.XamMaskedInput.DataMode"/>
            <seealso cref="P:Infragistics.Controls.Editors.XamMaskedInput.DisplayMode"/>
            <seealso cref="P:Infragistics.Controls.Editors.XamMaskedInput.Mask"/>
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Editors.XamMaskedInput.InsertModeProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.XamMaskedInput.InsertMode"/> dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.XamMaskedInput.InsertMode">
            <summary>
            Returns or sets the editing mode (insert or overstrike).
            </summary>
            <remarks>
            <p class="body">When this property is set to True, characters typed will be inserted at the current caret position and any following characters will be shifted. When set to False, typing at an insertion point that contains an existing character will replace that character. The value of this property also affects how characters are deleted using either The Delete key or the Backspace key. When in insert mode, characters after the character being deleted will be shifted by one to the left within the section.</p>
            <seealso cref="P:Infragistics.Controls.Editors.XamMaskedInput.AllowShiftingAcrossSections"/>
            <seealso cref="P:Infragistics.Controls.Editors.XamMaskedInput.SelectAllBehavior"/>
            <seealso cref="P:Infragistics.Controls.Editors.XamMaskedInput.SectionTabNavigation"/>
            <seealso cref="P:Infragistics.Controls.Editors.XamMaskedInput.AutoFillDate"/>
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Editors.XamMaskedInput.MaskProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.XamMaskedInput.Mask"/> dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.XamMaskedInput.Mask">
            <summary>
            Returns or sets the mask associated with the masked edit control.
            </summary>
            <remarks>
            <p class="body">When a mask is defined, placeholders are defined by the 
            <see cref="P:Infragistics.Controls.Editors.XamMaskedInput.PromptChar"/> property. When inputting data, the user can only 
            replace a placeholder with a character that is of the same type as the one 
            specified in the mask. If the user enters an invalid character, the control 
            rejects the character and generates the <see cref="E:Infragistics.Controls.Editors.XamMaskedInput.InvalidChar"/> event. The 
            control can distinguish between numeric and alphabetic characters for 
            validation, as well as validate for valid content for certain types like, 
            date or time or numeric types such as the correct 
            month or time of day etc...</p>
            <p class="body">For a complete list of the various mask tokens as well as 
            examples please refer to <a href="xaminputs-masks.html">Masks</a> topic.</p>
            <p class="note"><b>Note:</b> When specifying the mask from within XAML and using 
            one of the special tokens that are enclosed within {}, you must preceed the 
            mask with {} - e.g. {}{date}.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMaskedInput.OnValueTypeResolvedChanged(System.Type)">
            <summary>
            Overridden. Called when the ValueTypeResolved property changes.
            </summary>
            <param name="newType">New value of the property.</param>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMaskedInput.ApplyMask(System.String,System.String,System.IFormatProvider,System.Char,System.Char,Infragistics.Controls.Editors.InputMaskMode)">
            <summary>
            Applies the specified mask to the specified text and returns the result.
            </summary>
            <param name="text">Text to apply the mask to.</param>
            <param name="mask">The mask to apply.</param>
            <param name="formatProvider">Provides culture specific symbols in the mask. This may not 
            be applicable to all masks - only the masks that have characters (like currency symbol) 
            that need to be represented by culture specific version of the symbol.</param>
            <param name="promptCharacter">The prompt character - only applicable with certain mask modes.</param>
            <param name="padCharacter">The pad character - only applicable with certain mask modes.</param>
            <param name="maskMode">Specifies the mask mode.</param>
            <returns>The result of applying the specified mask to the specified text.</returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMaskedInput.SyncValuePropertiesOverride(System.Windows.DependencyProperty,System.Object,System.Exception@)">
            <summary>
            Overridden. Called to synchronize value and text properties. Derived classes can override this
            method if they have their own value properties (like the XamCheckEditor which has
            IsChecked property) because the Value, Text and all other editor specific value
            related properties need to be kept in sync. Default implementation synchronizes
            Value and Text properties.
            </summary>
            <param name="prop">Property that changed.</param>
            <param name="newValue">New value of the property.</param>
            <param name="error">Set this to the any error message if synchronization fails (for example
            because of type conversion or some other problem with syncrhonizing the new value).</param>
            <returns>Value indicating whether the new value should be considered valid. If false is
            returned, IsValueValid property will be set to false.</returns>
        </member>
        <member name="F:Infragistics.Controls.Editors.XamMaskedInput.DataModeProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.XamMaskedInput.DataMode"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.XamMaskedInput.DataMode">
            <summary>
            Returns or sets a value that determines how the control's contents will be stored by 
            the data source when data masking is enabled.
            </summary>
            <remarks>
            <p class="body">This property is used to determine how mask literals and prompt characters are handled when the control's contents are passed to the data source (or are retrieved using the <see cref="P:Infragistics.Controls.Editors.ValueInput.Text"/> property.) Based on the setting of this property, the text of the control will contain no prompt characters or literals (just the raw data), the data and just the literals, the data and just the prompt characters, or all the text including both prompt characters and literals. The formatted spacing of partially masked values can be preserved by indicating to include literals with padding, which includes data and literal characters, but replaces prompt characters with pad characters (usually spaces).</p>
            <p class="body">Generally, simply the raw data is committed to the data source and data masking is used to format the data when it is displayed. In some cases, however, it may be appropriate in your application to store mask literals as well as data.</p>
            <seealso cref="P:Infragistics.Controls.Editors.XamMaskedInput.DisplayMode"/> <seealso cref="P:Infragistics.Controls.Editors.XamMaskedInput.ClipMode"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMaskedInput.ShouldSerializeDataMode">
            <summary>
            Returns true if the DataMode property is set to a non-default value.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMaskedInput.ResetDataMode">
            <summary>
            Resets the DataMode property to its default state.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.XamMaskedInput.ClipModeProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.XamMaskedInput.ClipMode"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.XamMaskedInput.ClipMode">
            <summary>
            Returns or sets a value that determines how the control's contents will be copied to the clipboard when data masking is in enabled.
            </summary>
            <remarks>
            <p class="body">This property is used to determine how mask literals and prompt characters are handled when the control's contents are copied to the clipboard. Based on the setting of this property, the text of the control will contain no prompt characters or literals (just the raw data), the data and just the literals, the data and just the prompt characters, or all the text including both prompt characters and literals. The formatted spacing of partially masked values can be preserved by indicating to include literals with padding, which includes data and literal characters, but replaces prompt characters with pad characters (usually spaces).</p>
            <seealso cref="P:Infragistics.Controls.Editors.XamMaskedInput.DataMode"/> <seealso cref="P:Infragistics.Controls.Editors.XamMaskedInput.DisplayMode"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMaskedInput.ShouldSerializeClipMode">
            <summary>
            Returns true if the ClipMode property is set to a non-default value.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMaskedInput.ResetClipMode">
            <summary>
            Resets the ClipMode property to its default state.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.XamMaskedInput.DisplayModeProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.XamMaskedInput.DisplayMode"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.XamMaskedInput.DisplayMode">
            <summary>
            Returns or sets a value that determines how the control's contents will be displayed when the control is not in edit mode and data masking is enabled.
            </summary>
            <remarks>
            <p class="body">This property is used to determine how mask literals and prompt characters are displayed when the control is not in edit mode. Based on the setting of this property, the text of the control will contain no prompt characters or literals (just the raw data), the data and just the literals, the data and just the prompt characters, or all the text including both prompt characters and literals. The formatted spacing of partially masked values can be preserved by indicating to include literals with padding, which includes data and literal characters, but replaces prompt characters with pad characters (usually spaces).</p>
            <p class="body">Generally, prompt characters disappear when a cell is no longer in edit mode, as a visual cue to the user. In some cases, however, it may be appropriate in your application to display mask literals as well as data when a cell is no longer in edit mode.</p>
            <seealso cref="P:Infragistics.Controls.Editors.XamMaskedInput.DataMode"/> <seealso cref="P:Infragistics.Controls.Editors.XamMaskedInput.ClipMode"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMaskedInput.ShouldSerializeDisplayMode">
            <summary>
            Returns true if the DisplayMode property is set to a non-default value.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMaskedInput.ResetDisplayMode">
            <summary>
            Resets the DisplayMode property to its default state.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.XamMaskedInput.PadCharProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.XamMaskedInput.PadChar"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.XamMaskedInput.PadChar">
            <summary>
            Returns or sets the character that will be used as the pad character. Default is space character (' ').
            </summary>
            <remarks>
            <p class="body">The pad character is the character that is used to replace the prompt characters when getting the data from the XamMaskedInput control with DataMode of IncludeLiteralsWithPadding.</p>
            <para class="body">
            For example, if the data in the editor is as follows:<br/>
            111-2_-____<br/>
            and DataMode is set to IncludeLiteralsWithPadding then the returned value will be "111-2 -    ".
            Prompt characters will be replaced by the pad character.
            </para>
            <seealso cref="P:Infragistics.Controls.Editors.XamMaskedInput.PromptChar"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMaskedInput.ShouldSerializePadChar">
            <summary>
            Returns true if the PadChar property is set to a non-default value.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMaskedInput.ResetPadChar">
            <summary>
            Resets the PadChar property to its default state.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.XamMaskedInput.PromptCharProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.XamMaskedInput.PromptChar"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.XamMaskedInput.PromptChar">
            <summary>
            Returns or sets the prompt character. The default prompt character is the underscore (_).
            </summary>
            <remarks>
            <para class="body">
            Prompt character is the character that's displayed in place of any blank display characters.
            Each display character is a place holder in the mask where the user enters the characters
            as required by the mask. The default prompt character is underscore (_).
            </para>
            <seealso cref="P:Infragistics.Controls.Editors.XamMaskedInput.PadChar"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMaskedInput.ShouldSerializePromptChar">
            <summary>
            Returns true if the PromptChar property is set to a non-default value.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMaskedInput.ResetPromptChar">
            <summary>
            Resets the PromptChar property to its default state.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMaskedInput.SelectAll">
            <summary>
            Selects all the text in the control.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMaskedInput.Delete">
            <summary>
            Deletes currently selected text if possible and shifts characters accordingly.
            </summary>
            <remarks>
            <p class="body">When you invoke this method, the control tries to delete the  currently selected text and shift characters. If nothing is selected, it tries to delete the character at the current input position.</p> 
            <p class="body">This method returns True if the operation was successful. If the operation fails because characters after the selection could not be shifted, the method returns False.</p>
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMaskedInput.Copy">
            <summary>
            Performs a Copy edit operation on the currently selected text, placing it on the clipboard.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMaskedInput.Cut">
            <summary>
            Performs a Cut edit operation on the currently selected text, removing it from the control and placing it on the clipboard.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMaskedInput.Paste">
            <summary>
            Performs a Paste edit operation.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMaskedInput.ToggleInsertMode">
            <summary>
            Toggles between insert and overstrike mode.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.XamMaskedInput.SectionTabNavigationProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.XamMaskedInput.SectionTabNavigation"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.XamMaskedInput.SectionTabNavigation">
            <summary>
            Specifies whether to tab between sections when Tab and Shift+Tab keys are pressed.
            The default value is <b>NextControl</b>.
            </summary>
            <seealso cref="P:Infragistics.Controls.Editors.XamMaskedInput.AllowShiftingAcrossSections"/>
            <seealso cref="P:Infragistics.Controls.Editors.XamMaskedInput.InsertMode"/>
            <seealso cref="P:Infragistics.Controls.Editors.XamMaskedInput.SelectAllBehavior"/>
            <seealso cref="P:Infragistics.Controls.Editors.XamMaskedInput.AutoFillDate"/>
        </member>
        <member name="P:Infragistics.Controls.Editors.XamMaskedInput.AllowShiftingAcrossSections">
            <summary>
            Specifies whether to shift characters across section boundaries when deleting characters.
            Default value is <b>True</b>.
            </summary>
            <remarks>
            <para class="body">
            This property controls what happens to the characters in the following sections when one or 
            more characters are deleted in the current section. For example, in a simple mask like 
            "###-###" where there are two input sections separated by a '-' character. Each input section
            comprises of three digit placeholders. Let's say the whole mask is currently filled with data. 
            When you delete a character in the first section, this property controls whether the characters
            from the next input section flow into this section or not.
            </para>
            <para class="body">
            Continuing from above example, let's say the editor has the following data:<br/>
            "123-456"<br/>
            If the caret is located before the character '2' and you hit Delete key, the 2 will be deleted 
            and '3' will be shifted left to occupy the position '2' had occupied. This will happen regardless
            of the AllowShiftingAcrossSections setting. However what happens after this depends on the value
            of this property.
            <b>If AllowShiftingAcrossSections is set to False</b>, the position '3' originally occupied will
            become empty and the resulting display characters will be as the following:<br/>
            "13_-456"<br/>
            <b>If AllowShiftingAcrossSections is set to True</b>, characters from the next input section will
            'flow' into current input section to fill in the position vacated by '3' when it got shifted left
            to occpy the position of '2'. Here is how the resulting display characters will look like:<br/>
            "134-56_"<br/>
            </para>
            <para class="body">
            What value you would use for this property depends on the kind of mask that you have. The usability
            is greatly affected by the value of this property depending on the mask being used. For example, in
            a Date mask where each section of the date (month, day, year) is a logically distinct value, you 
            would not want to shift values across sections. As a matter of fact, for certain built in masks
            like date, time etc... shifting across sections can not be enabled even by setting this property to
            True since that is something that would not be desirable under any circumstance for those masks. However 
            for custom masks, you may want to set this property to a value based on whether it makes sense for that 
            particular mask to shift characters across sections.
            </para>
            <seealso cref="P:Infragistics.Controls.Editors.XamMaskedInput.InsertMode"/>
            <seealso cref="P:Infragistics.Controls.Editors.XamMaskedInput.SelectAllBehavior"/>
            <seealso cref="P:Infragistics.Controls.Editors.XamMaskedInput.SectionTabNavigation"/>
            <seealso cref="P:Infragistics.Controls.Editors.XamMaskedInput.AutoFillDate"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMaskedInput.IsValidPromptChar(System.Char)">
            <summary>
            Indicates if the specified character is valid for use as a prompt character for the <see cref="T:Infragistics.Controls.Editors.XamMaskedInput"/>.
            </summary>
            <param name="promptCharacter">Character to evaluate</param>
            <returns>False if the character is a tab, new line or carriage return. Otherwise true is returned.</returns>
        </member>
        <member name="P:Infragistics.Controls.Editors.XamMaskedInput.SelectionStart">
            <summary>
            Indicates the start location of the selected text. If no text is selected, this property indicates
            the location of the caret.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.XamMaskedInput.SelectionLength">
            <summary>
            Gets/sets the length of the selected text. If nothing is selected then returns 0.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.XamMaskedInput.SelectedText">
            <summary>
            Gets or sets the selected text.
            </summary>
            <remarks>
            <para class="body">
            <b>SelectedText</b> property returns the currently selected text if any. If nothing is selected
            then returns empty string.
            </para>
            <para class="body">
            Setting this property replaces the current selected text with the set value. If nothing
            is selected and the property is set, the set value is inserted at the location of the caret.
            Note that setting this property will modify the contents of the control.
            </para>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Editors.XamMaskedInput.TextLength">
            <summary>
            Indicates the total length of the text in the control when in edit mode.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.XamMaskedInput.IsUndoEnabledProperty">
            <summary>
            Gets/sets if the undo/redo operations are enabled. By default, the undo/redo is enabled.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.XamMaskedInput.IsUndoEnabled">
            <summary>
            Specifies whether the undo/redo operations are enabled. Default value is <b>True</b>.
            </summary>
            <remarks>
            <b>IsUndoEnabled</b> property specifies whether the undo/redo operations are enabled. 
            By default, the undo/redo is enabled.
            </remarks>
            <seealso cref="F:Infragistics.Controls.Editors.XamMaskedInput.IsUndoEnabledProperty"/>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMaskedInput.GetDefaultMask(System.Type,System.IFormatProvider)">
            <summary>
            Gets the default mask for the editor. When the owner doesn't provide any
            mask, value of this property will be used as the default mask. Default value is
            null. You should only override this property if your editor only supports a specific 
            type. For example, DateTimeEditor only supports Date. Editing numbers, or strings 
            do not make sense for a date time editor. So for such editors, override and return
            a default mask for that editor.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.XamMaskedInput.SelectAllBehaviorProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.XamMaskedInput.SelectAllBehavior"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.XamMaskedInput.SelectAllBehavior">
            <summary>
            Specifies whether to select only the entered characters or all the characters (including prompt
            characters) when the editor performs the operation of select all text. The default value of
            the property is <b>SelectAllCharacters</b>.
            </summary>
            <remarks>
            <p class="body">
            When this property is set to <b>SelectEnteredCharacters</b>, the select-all-text operation will
            select text starting from the first entered character to the last entered character, including
            adjacent literals.
            </p>
            </remarks>
            <seealso cref="P:Infragistics.Controls.Editors.XamMaskedInput.AllowShiftingAcrossSections"/>
            <seealso cref="P:Infragistics.Controls.Editors.XamMaskedInput.InsertMode"/>
            <seealso cref="P:Infragistics.Controls.Editors.XamMaskedInput.SectionTabNavigation"/>
            <seealso cref="P:Infragistics.Controls.Editors.XamMaskedInput.AutoFillDate"/>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMaskedInput.ShouldSerializeSelectAllBehavior">
            <summary>
            Returns true if the SelectAllBehavior property is set to a non-default value.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMaskedInput.ResetSelectAllBehavior">
            <summary>
            Resets the SelectAllBehavior property to its default state.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.XamMaskedInput.AutoFillDateProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.XamMaskedInput.AutoFillDate"/> dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.XamMaskedInput.AutoFillDate">
            <summary>
            Specifies whether to auto-fill empty date components when the user attempts to leave the editor.
            The default is <b>None</b>.
            </summary>
            <remarks>
            <para class="body">
            If the user types in an incomplete date then the editor will consider the input invalid
            and take appropriate actions based on the <see cref="P:Infragistics.Controls.Editors.ValueInput.InvalidValueBehavior"/>
            property setting. <b>AutoFillDate</b> lets you specify that such partial date inputs be
            auto-filled using the current date.
            </para>
            <para class="body">
            If you set the AutoFillDate to <b>Year</b> then the user will be required to enter both 
            the month and the day. The year if left blank will be filled in with the current year.
            If AutoFillDate is set to <b>MonthAndYear</b> then the user will be required to enter
            the day. The month and year if left blank will be filled in with the current month and
            the current year respectively.
            </para>
            <seealso cref="P:Infragistics.Controls.Editors.XamMaskedInput.AllowShiftingAcrossSections"/>
            <seealso cref="P:Infragistics.Controls.Editors.XamMaskedInput.InsertMode"/>
            <seealso cref="P:Infragistics.Controls.Editors.XamMaskedInput.SelectAllBehavior"/>
            <seealso cref="P:Infragistics.Controls.Editors.XamMaskedInput.SectionTabNavigation"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMaskedInput.ShouldSerializeAutoFillDate">
            <summary>
            Returns true if the AutoFillDate property is set to a non-default value.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMaskedInput.ResetAutoFillDate">
            <summary>
            Resets the AutoFillDate property to its default state.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.XamMaskedInput.DefaultValueToDisplayTextConverter">
            <summary>
            Overridden. Returns the default converter used for converting between the value and the text.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.XamMaskedInput.DefaultValueToTextConverter">
            <summary>
            Overridden. Returns the default converter used for converting between the value and the text.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMaskedInput.ExecuteCommand(Infragistics.Controls.Editors.Primitives.MaskedInputCommandId,System.Object,System.Windows.FrameworkElement)">
            <summary>
            Executes the command associated with the specified <see cref="T:Infragistics.Controls.Editors.Primitives.MaskedInputCommandId"/> value.
            </summary>
            <param name="command">The Command to execute.</param>
            <param name="commandParameter">An optional parameter.</param>
            <param name="sourceElement">The source of the command</param>
            <returns>True if command was executed, false if canceled.</returns>
            <seealso cref="T:Infragistics.Controls.Editors.Primitives.MaskedInputCommandId"/>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMaskedInput.OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)">
            <summary>
            Called when the ContextMenu is about to open
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="T:Infragistics.Controls.Editors.XamNumericInput">
            <summary>
            Allows editing of numeric data based on a mask.
            </summary>
            <remarks>
            <p class="body">The <b>XamNumericInput</b> is a derived <see cref="T:Infragistics.Controls.Editors.XamMaskedInput"/> that is designed to 
            display and edit numeric data. By default, its <see cref="P:Infragistics.Controls.Editors.ValueInput.ValueType"/> property is set to 
            <see cref="T:System.Double"/>.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamNumericInput.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Controls.Editors.XamNumericInput"/>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.XamNumericInput.DefaultValueType">
            <summary>
            Returns the default value type of the editor. When the <see cref="P:Infragistics.Controls.Editors.ValueInput.ValueType"/> property is not set, this is
            the type that the <see cref="P:Infragistics.Controls.Editors.ValueInput.ValueTypeResolved"/> will return.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Editors.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:Infragistics.AutomationPeers.ValueInputAutomationPeer">
            <summary>
            Exposes <see cref="T:Infragistics.Controls.Editors.ValueInput"/> types to UI Automation
            </summary>
        </member>
        <member name="M:Infragistics.AutomationPeers.ValueInputAutomationPeer.#ctor(Infragistics.Controls.Editors.ValueInput)">
            <summary>
            Creates a new instance of the <see cref="T:Infragistics.AutomationPeers.ValueInputAutomationPeer"/> class
            </summary>
            <param name="owner">The <see cref="T:Infragistics.Controls.Editors.ValueInput"/> for which the peer is being created</param>
        </member>
        <member name="M:Infragistics.AutomationPeers.ValueInputAutomationPeer.GetClassNameCore">
            <summary>
            Returns the name of the <see cref="T:Infragistics.Controls.Editors.ValueInput"/>
            </summary>
            <returns>A string that contains 'ValueInput'</returns>
        </member>
        <member name="M:Infragistics.AutomationPeers.ValueInputAutomationPeer.GetPatternCore(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Returns the control pattern associated with the specified <see cref="T:System.Windows.Automation.Peers.PatternInterface"/> for the element that is associated with this <see cref="T:Infragistics.AutomationPeers.XamMaskedInputAutomationPeer"/>.
            </summary>
            <param name="patternInterface">The pattern being requested</param>
        </member>
        <member name="M:Infragistics.AutomationPeers.ValueInputAutomationPeer.SetFocusCore">
            <summary>
            Called to focus the associtaed element
            </summary>
        </member>
        <member name="P:Infragistics.AutomationPeers.ValueInputAutomationPeer.Editor">
            <summary>
            Returns the <see cref="T:Infragistics.Controls.Editors.ValueInput"/> associated with the automation peer.
            </summary>
        </member>
        <member name="T:Infragistics.AutomationPeers.XamMaskedInputAutomationPeer">
            <summary>
            Exposes <see cref="T:Infragistics.Controls.Editors.XamMaskedInput"/> types to UI Automation
            </summary>
        </member>
        <member name="M:Infragistics.AutomationPeers.XamMaskedInputAutomationPeer.#ctor(Infragistics.Controls.Editors.XamMaskedInput)">
            <summary>
            Creates a new instance of the <see cref="T:Infragistics.AutomationPeers.XamMaskedInputAutomationPeer"/> class
            </summary>
            <param name="owner">The <see cref="T:Infragistics.Controls.Editors.XamMaskedInput"/> for which the peer is being created</param>
        </member>
        <member name="M:Infragistics.AutomationPeers.XamMaskedInputAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Returns an enumeration indicating the type of control represented by the automation peer.
            </summary>
            <returns>The <b>Edit</b> enumeration value</returns>
        </member>
        <member name="M:Infragistics.AutomationPeers.XamMaskedInputAutomationPeer.GetClassNameCore">
            <summary>
            Returns the name of the <see cref="T:Infragistics.Controls.Editors.XamMaskedInput"/>
            </summary>
            <returns>A string that contains 'XamMaskedInput'</returns>
        </member>
        <member name="M:Infragistics.AutomationPeers.XamMaskedInputAutomationPeer.GetPatternCore(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Returns the control pattern associated with the specified <see cref="T:System.Windows.Automation.Peers.PatternInterface"/> for the element that is associated with this <see cref="T:Infragistics.AutomationPeers.XamMaskedInputAutomationPeer"/>.
            </summary>
            <param name="patternInterface">The pattern being requested</param>
        </member>
    </members>
</doc>
